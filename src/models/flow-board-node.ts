/* tslint:disable */
/* eslint-disable */
/**
 * Zeplin API
 * Access your resources in Zeplin
 *
 * Contact: support@zeplin.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import {
    EntityReference,
    transformEntityReferenceToJSON,
    transformJSONToEntityReference
} from './entity-reference';
import {
    FlowBoardPosition,
    transformFlowBoardPositionToJSON,
    transformJSONToFlowBoardPosition
} from './flow-board-position';
import {
    FlowBoardScreenNode,
    transformFlowBoardScreenNodeToJSON,
    transformJSONToFlowBoardScreenNode
} from './flow-board-screen-node';
import {
    FlowBoardTextNode,
    transformFlowBoardTextNodeToJSON,
    transformJSONToFlowBoardTextNode
} from './flow-board-text-node';
import {
    FlowBoardVariantGroupNode,
    transformFlowBoardVariantGroupNodeToJSON,
    transformJSONToFlowBoardVariantGroupNode
} from './flow-board-variant-group-node';


export const transformJSONToFlowBoardNode = function (value: any): FlowBoardNode {
    switch (value.type) {
        case 'Screen':
            return transformJSONToFlowBoardScreenNode(value);
        case 'Text':
            return transformJSONToFlowBoardTextNode(value);
        case 'VariantGroup':
            return transformJSONToFlowBoardVariantGroupNode(value);
        default:
            throw new Error(`No variant of FlowBoardNode exists with 'type=${ value.type }'`);
    }
}

export const transformFlowBoardNodeToJSON = function (value: FlowBoardNode): any {
    switch (value.type) {
        case 'Screen':
            return transformFlowBoardScreenNodeToJSON(value);
        case 'Text':
            return transformFlowBoardTextNodeToJSON(value);
        case 'VariantGroup':
            return transformFlowBoardVariantGroupNodeToJSON(value);
    }
}

/**
 * @type FlowBoardNode
 * @export
 */
export type FlowBoardNode = FlowBoardScreenNode | FlowBoardTextNode | FlowBoardVariantGroupNode;


