/* tslint:disable */
/* eslint-disable */
/**
 * Zeplin API
 * Access your resources in Zeplin
 *
 * Contact: support@zeplin.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosResponse } from 'axios';
import FormData from 'form-data';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import {
    Color,
    transformColorToJSON,
    transformJSONToColor
} from '../models';
// @ts-ignore
import {
    ColorCreateBody,
    transformColorCreateBodyToJSON,
    transformJSONToColorCreateBody
} from '../models';
// @ts-ignore
import {
    ColorUpdateBody,
    transformColorUpdateBodyToJSON,
    transformJSONToColorUpdateBody
} from '../models';
// @ts-ignore
import {
    EntityReference,
    transformEntityReferenceToJSON,
    transformJSONToEntityReference
} from '../models';
// @ts-ignore
import {
    ErrorResponse,
    transformErrorResponseToJSON,
    transformJSONToErrorResponse
} from '../models';
/**
 * ColorsApi - axios parameter creator
 * @export
 */
export const ColorsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a color in the project\'s local styleguide
         * @summary Create project color
         * @param {string} projectId Project id
         * @param {ColorCreateBody} colorCreateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProjectColor: async (projectId: string, colorCreateBody: ColorCreateBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('createProjectColor', 'projectId', projectId)
            // verify required parameter 'colorCreateBody' is not null or undefined
            assertParamExists('createProjectColor', 'colorCreateBody', colorCreateBody)
            const localVarPath = `/v1/projects/{project_id}/colors`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transformColorCreateBodyToJSON(colorCreateBody), localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a color in the styleguide\'s local styleguide
         * @summary Create styleguide color
         * @param {string} styleguideId Styleguide id
         * @param {ColorCreateBody} colorCreateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStyleguideColor: async (styleguideId: string, colorCreateBody: ColorCreateBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'styleguideId' is not null or undefined
            assertParamExists('createStyleguideColor', 'styleguideId', styleguideId)
            // verify required parameter 'colorCreateBody' is not null or undefined
            assertParamExists('createStyleguideColor', 'colorCreateBody', colorCreateBody)
            const localVarPath = `/v1/styleguides/{styleguide_id}/colors`
                .replace(`{${"styleguide_id"}}`, encodeURIComponent(String(styleguideId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transformColorCreateBodyToJSON(colorCreateBody), localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns all of the colors in a project.  You need to be a member of the project or a member of the organization that owns the project. Returns `Not Found` response otherwise. 
         * @summary Get project colors
         * @param {string} projectId Project id
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectColors: async (projectId: string, limit?: number, offset?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProjectColors', 'projectId', projectId)
            const localVarPath = `/v1/projects/{project_id}/colors`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

    
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns colors in a styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access. 
         * @summary Get styleguide colors
         * @param {string} styleguideId Styleguide id
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {string} [linkedProject] Reference project id
         * @param {string} [linkedStyleguide] Reference styleguide id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStyleguideColors: async (styleguideId: string, limit?: number, offset?: number, linkedProject?: string, linkedStyleguide?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'styleguideId' is not null or undefined
            assertParamExists('getStyleguideColors', 'styleguideId', styleguideId)
            const localVarPath = `/v1/styleguides/{styleguide_id}/colors`
                .replace(`{${"styleguide_id"}}`, encodeURIComponent(String(styleguideId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (linkedProject !== undefined) {
                localVarQueryParameter['linked_project'] = linkedProject;
            }

            if (linkedStyleguide !== undefined) {
                localVarQueryParameter['linked_styleguide'] = linkedStyleguide;
            }

    
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a color in the project\'s local styleguide
         * @summary Update project color
         * @param {string} projectId Project id
         * @param {string} colorId Color id
         * @param {ColorUpdateBody} colorUpdateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProjectColor: async (projectId: string, colorId: string, colorUpdateBody: ColorUpdateBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('updateProjectColor', 'projectId', projectId)
            // verify required parameter 'colorId' is not null or undefined
            assertParamExists('updateProjectColor', 'colorId', colorId)
            // verify required parameter 'colorUpdateBody' is not null or undefined
            assertParamExists('updateProjectColor', 'colorUpdateBody', colorUpdateBody)
            const localVarPath = `/v1/projects/{project_id}/colors{color_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"color_id"}}`, encodeURIComponent(String(colorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transformColorUpdateBodyToJSON(colorUpdateBody), localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a color in the styleguide
         * @summary Update styleguide color
         * @param {string} styleguideId Styleguide id
         * @param {string} colorId Color id
         * @param {ColorUpdateBody} colorUpdateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStyleguideColor: async (styleguideId: string, colorId: string, colorUpdateBody: ColorUpdateBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'styleguideId' is not null or undefined
            assertParamExists('updateStyleguideColor', 'styleguideId', styleguideId)
            // verify required parameter 'colorId' is not null or undefined
            assertParamExists('updateStyleguideColor', 'colorId', colorId)
            // verify required parameter 'colorUpdateBody' is not null or undefined
            assertParamExists('updateStyleguideColor', 'colorUpdateBody', colorUpdateBody)
            const localVarPath = `/v1/styleguides/{styleguide_id}/colors/{color_id}`
                .replace(`{${"styleguide_id"}}`, encodeURIComponent(String(styleguideId)))
                .replace(`{${"color_id"}}`, encodeURIComponent(String(colorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transformColorUpdateBodyToJSON(colorUpdateBody), localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ColorsApi - functional programming interface
 * @export
 */
export const ColorsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ColorsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a color in the project\'s local styleguide
         * @summary Create project color
         * @param {string} projectId Project id
         * @param {ColorCreateBody} colorCreateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProjectColor(projectId: string, colorCreateBody: ColorCreateBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProjectColor(projectId, colorCreateBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a color in the styleguide\'s local styleguide
         * @summary Create styleguide color
         * @param {string} styleguideId Styleguide id
         * @param {ColorCreateBody} colorCreateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createStyleguideColor(styleguideId: string, colorCreateBody: ColorCreateBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createStyleguideColor(styleguideId, colorCreateBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint returns all of the colors in a project.  You need to be a member of the project or a member of the organization that owns the project. Returns `Not Found` response otherwise. 
         * @summary Get project colors
         * @param {string} projectId Project id
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectColors(projectId: string, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectColors(projectId, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns colors in a styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access. 
         * @summary Get styleguide colors
         * @param {string} styleguideId Styleguide id
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {string} [linkedProject] Reference project id
         * @param {string} [linkedStyleguide] Reference styleguide id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStyleguideColors(styleguideId: string, limit?: number, offset?: number, linkedProject?: string, linkedStyleguide?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStyleguideColors(styleguideId, limit, offset, linkedProject, linkedStyleguide, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a color in the project\'s local styleguide
         * @summary Update project color
         * @param {string} projectId Project id
         * @param {string} colorId Color id
         * @param {ColorUpdateBody} colorUpdateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProjectColor(projectId: string, colorId: string, colorUpdateBody: ColorUpdateBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProjectColor(projectId, colorId, colorUpdateBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a color in the styleguide
         * @summary Update styleguide color
         * @param {string} styleguideId Styleguide id
         * @param {string} colorId Color id
         * @param {ColorUpdateBody} colorUpdateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStyleguideColor(styleguideId: string, colorId: string, colorUpdateBody: ColorUpdateBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStyleguideColor(styleguideId, colorId, colorUpdateBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};




/**
 * Search parameters for getProjectColors operation in ColorsApi.
 * @export
 * @interface ColorsApiGetProjectColorsSearchParams
 */
export interface ColorsApiGetProjectColorsSearchParams {
    /**
     * Pagination limit
     * @type {number}
     * @memberof ColorsApiGetProjectColorsSearchParams
     */
    readonly limit?: number;

    /**
     * Pagination offset
     * @type {number}
     * @memberof ColorsApiGetProjectColorsSearchParams
     */
    readonly offset?: number;
}

/**
 * Search parameters for getStyleguideColors operation in ColorsApi.
 * @export
 * @interface ColorsApiGetStyleguideColorsSearchParams
 */
export interface ColorsApiGetStyleguideColorsSearchParams {
    /**
     * Pagination limit
     * @type {number}
     * @memberof ColorsApiGetStyleguideColorsSearchParams
     */
    readonly limit?: number;

    /**
     * Pagination offset
     * @type {number}
     * @memberof ColorsApiGetStyleguideColorsSearchParams
     */
    readonly offset?: number;

    /**
     * Reference project id
     * @type {string}
     * @memberof ColorsApiGetStyleguideColorsSearchParams
     */
    readonly linkedProject?: string;

    /**
     * Reference styleguide id
     * @type {string}
     * @memberof ColorsApiGetStyleguideColorsSearchParams
     */
    readonly linkedStyleguide?: string;
}




/**
 * ColorsApi - object-oriented interface
 * @export
 * @class ColorsApi
 * @extends {BaseAPI}
 */
export class ColorsApi extends BaseAPI {
    /**
     * Create a color in the project\'s local styleguide
     * @summary Create project color
     * @param {string} projectId Project id
     * @param {ColorCreateBody} colorCreateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ColorsApi
     */
    public async createProjectColor(projectId: string, colorCreateBody: ColorCreateBody, options?: any) : Promise<AxiosResponse<EntityReference>> {
        const colorsApiFp = ColorsApiFp(this.configuration);
        const request = await colorsApiFp.createProjectColor(projectId, colorCreateBody, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: transformJSONToEntityReference(response.data)
        };
    }

    /**
     * Create a color in the styleguide\'s local styleguide
     * @summary Create styleguide color
     * @param {string} styleguideId Styleguide id
     * @param {ColorCreateBody} colorCreateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ColorsApi
     */
    public async createStyleguideColor(styleguideId: string, colorCreateBody: ColorCreateBody, options?: any) : Promise<AxiosResponse<EntityReference>> {
        const colorsApiFp = ColorsApiFp(this.configuration);
        const request = await colorsApiFp.createStyleguideColor(styleguideId, colorCreateBody, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: transformJSONToEntityReference(response.data)
        };
    }

    /**
     * This endpoint returns all of the colors in a project.  You need to be a member of the project or a member of the organization that owns the project. Returns `Not Found` response otherwise. 
     * @summary Get project colors
     * @param {string} projectId Project id
     * @param {ColorsApiGetProjectColorsSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ColorsApi
     */
    public async getProjectColors(projectId: string, searchParams: ColorsApiGetProjectColorsSearchParams = {}, options?: any) : Promise<AxiosResponse<Array<Color>>> {
        const colorsApiFp = ColorsApiFp(this.configuration);
        const request = await colorsApiFp.getProjectColors(projectId, searchParams.limit, searchParams.offset, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: response.data.map(transformJSONToColor)
        };
    }

    /**
     * Returns colors in a styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access. 
     * @summary Get styleguide colors
     * @param {string} styleguideId Styleguide id
     * @param {ColorsApiGetStyleguideColorsSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ColorsApi
     */
    public async getStyleguideColors(styleguideId: string, searchParams: ColorsApiGetStyleguideColorsSearchParams = {}, options?: any) : Promise<AxiosResponse<Array<Color>>> {
        const colorsApiFp = ColorsApiFp(this.configuration);
        const request = await colorsApiFp.getStyleguideColors(styleguideId, searchParams.limit, searchParams.offset, searchParams.linkedProject, searchParams.linkedStyleguide, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: response.data.map(transformJSONToColor)
        };
    }

    /**
     * Update a color in the project\'s local styleguide
     * @summary Update project color
     * @param {string} projectId Project id
     * @param {string} colorId Color id
     * @param {ColorUpdateBody} colorUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ColorsApi
     */
    public async updateProjectColor(projectId: string, colorId: string, colorUpdateBody: ColorUpdateBody, options?: any) : Promise<AxiosResponse<void>> {
        const colorsApiFp = ColorsApiFp(this.configuration);
        const request = await colorsApiFp.updateProjectColor(projectId, colorId, colorUpdateBody, options);
        const response = await request(this.axios, this.basePath);
        return response;
    }

    /**
     * Update a color in the styleguide
     * @summary Update styleguide color
     * @param {string} styleguideId Styleguide id
     * @param {string} colorId Color id
     * @param {ColorUpdateBody} colorUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ColorsApi
     */
    public async updateStyleguideColor(styleguideId: string, colorId: string, colorUpdateBody: ColorUpdateBody, options?: any) : Promise<AxiosResponse<void>> {
        const colorsApiFp = ColorsApiFp(this.configuration);
        const request = await colorsApiFp.updateStyleguideColor(styleguideId, colorId, colorUpdateBody, options);
        const response = await request(this.axios, this.basePath);
        return response;
    }
}
