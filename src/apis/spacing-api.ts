/* tslint:disable */
/* eslint-disable */
/**
 * Zeplin API
 * Access your resources in Zeplin
 *
 * Contact: support@zeplin.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosResponse } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import {
    ErrorResponse,
    transformErrorResponseToJSON,
    transformJSONToErrorResponse
} from '../models';
// @ts-ignore
import {
    SpacingSection,
    transformSpacingSectionToJSON,
    transformJSONToSpacingSection
} from '../models';
// @ts-ignore
import {
    SpacingToken,
    transformSpacingTokenToJSON,
    transformJSONToSpacingToken
} from '../models';
// @ts-ignore
import {
    SpacingTokenUpdateBody,
    transformSpacingTokenUpdateBodyToJSON,
    transformJSONToSpacingTokenUpdateBody
} from '../models';
/**
 * SpacingApi - axios parameter creator
 * @export
 */
export const SpacingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List all spacing sections of the project
         * @summary Get spacing sections of the project
         * @param {string} projectId Project id
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectSpacingSections: async (projectId: string, limit?: number, offset?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProjectSpacingSections', 'projectId', projectId)
            const localVarPath = `/v1/projects/{project_id}/spacing_sections`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all spacing tokens of the project
         * @summary Get spacing tokens of the project
         * @param {string} projectId Project id
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectSpacingTokens: async (projectId: string, limit?: number, offset?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProjectSpacingTokens', 'projectId', projectId)
            const localVarPath = `/v1/projects/{project_id}/spacing_tokens`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all spacing sections of the styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access. 
         * @summary Get spacing sections of the styleguide
         * @param {string} styleguideId Styleguide id
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {string} [linkedProject] Reference project id
         * @param {string} [linkedStyleguide] Reference styleguide id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStyleguideSpacingSections: async (styleguideId: string, limit?: number, offset?: number, linkedProject?: string, linkedStyleguide?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'styleguideId' is not null or undefined
            assertParamExists('getStyleguideSpacingSections', 'styleguideId', styleguideId)
            const localVarPath = `/v1/styleguides/{styleguide_id}/spacing_sections`
                .replace(`{${"styleguide_id"}}`, encodeURIComponent(String(styleguideId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (linkedProject !== undefined) {
                localVarQueryParameter['linked_project'] = linkedProject;
            }

            if (linkedStyleguide !== undefined) {
                localVarQueryParameter['linked_styleguide'] = linkedStyleguide;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all spacing tokens of the styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access. 
         * @summary Get spacing tokens of the styleguide
         * @param {string} styleguideId Styleguide id
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {string} [linkedProject] Reference project id
         * @param {string} [linkedStyleguide] Reference styleguide id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStyleguideSpacingTokens: async (styleguideId: string, limit?: number, offset?: number, linkedProject?: string, linkedStyleguide?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'styleguideId' is not null or undefined
            assertParamExists('getStyleguideSpacingTokens', 'styleguideId', styleguideId)
            const localVarPath = `/v1/styleguides/{styleguide_id}/spacing_tokens`
                .replace(`{${"styleguide_id"}}`, encodeURIComponent(String(styleguideId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (linkedProject !== undefined) {
                localVarQueryParameter['linked_project'] = linkedProject;
            }

            if (linkedStyleguide !== undefined) {
                localVarQueryParameter['linked_styleguide'] = linkedStyleguide;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a spacing token in the project\'s local styleguide
         * @summary Update project spacing token
         * @param {string} projectId Project id
         * @param {string} spacingTokenId Spacing token id
         * @param {SpacingTokenUpdateBody} spacingTokenUpdateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProjectSpacingToken: async (projectId: string, spacingTokenId: string, spacingTokenUpdateBody: SpacingTokenUpdateBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('updateProjectSpacingToken', 'projectId', projectId)
            // verify required parameter 'spacingTokenId' is not null or undefined
            assertParamExists('updateProjectSpacingToken', 'spacingTokenId', spacingTokenId)
            // verify required parameter 'spacingTokenUpdateBody' is not null or undefined
            assertParamExists('updateProjectSpacingToken', 'spacingTokenUpdateBody', spacingTokenUpdateBody)
            const localVarPath = `/v1/projects/{project_id}/spacing_tokens/{spacing_token_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"spacing_token_id"}}`, encodeURIComponent(String(spacingTokenId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transformSpacingTokenUpdateBodyToJSON(spacingTokenUpdateBody), localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a spacing token in the styleguide
         * @summary Update styleguide spacing token
         * @param {string} styleguideId Styleguide id
         * @param {string} spacingTokenId Spacing token id
         * @param {SpacingTokenUpdateBody} spacingTokenUpdateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStyleguideSpacingToken: async (styleguideId: string, spacingTokenId: string, spacingTokenUpdateBody: SpacingTokenUpdateBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'styleguideId' is not null or undefined
            assertParamExists('updateStyleguideSpacingToken', 'styleguideId', styleguideId)
            // verify required parameter 'spacingTokenId' is not null or undefined
            assertParamExists('updateStyleguideSpacingToken', 'spacingTokenId', spacingTokenId)
            // verify required parameter 'spacingTokenUpdateBody' is not null or undefined
            assertParamExists('updateStyleguideSpacingToken', 'spacingTokenUpdateBody', spacingTokenUpdateBody)
            const localVarPath = `/v1/styleguides/{styleguide_id}/spacing_tokens/{spacing_token_id}`
                .replace(`{${"styleguide_id"}}`, encodeURIComponent(String(styleguideId)))
                .replace(`{${"spacing_token_id"}}`, encodeURIComponent(String(spacingTokenId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transformSpacingTokenUpdateBodyToJSON(spacingTokenUpdateBody), localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SpacingApi - functional programming interface
 * @export
 */
export const SpacingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SpacingApiAxiosParamCreator(configuration)
    return {
        /**
         * List all spacing sections of the project
         * @summary Get spacing sections of the project
         * @param {string} projectId Project id
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectSpacingSections(projectId: string, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectSpacingSections(projectId, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all spacing tokens of the project
         * @summary Get spacing tokens of the project
         * @param {string} projectId Project id
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectSpacingTokens(projectId: string, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectSpacingTokens(projectId, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all spacing sections of the styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access. 
         * @summary Get spacing sections of the styleguide
         * @param {string} styleguideId Styleguide id
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {string} [linkedProject] Reference project id
         * @param {string} [linkedStyleguide] Reference styleguide id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStyleguideSpacingSections(styleguideId: string, limit?: number, offset?: number, linkedProject?: string, linkedStyleguide?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStyleguideSpacingSections(styleguideId, limit, offset, linkedProject, linkedStyleguide, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all spacing tokens of the styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access. 
         * @summary Get spacing tokens of the styleguide
         * @param {string} styleguideId Styleguide id
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {string} [linkedProject] Reference project id
         * @param {string} [linkedStyleguide] Reference styleguide id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStyleguideSpacingTokens(styleguideId: string, limit?: number, offset?: number, linkedProject?: string, linkedStyleguide?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStyleguideSpacingTokens(styleguideId, limit, offset, linkedProject, linkedStyleguide, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a spacing token in the project\'s local styleguide
         * @summary Update project spacing token
         * @param {string} projectId Project id
         * @param {string} spacingTokenId Spacing token id
         * @param {SpacingTokenUpdateBody} spacingTokenUpdateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProjectSpacingToken(projectId: string, spacingTokenId: string, spacingTokenUpdateBody: SpacingTokenUpdateBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProjectSpacingToken(projectId, spacingTokenId, spacingTokenUpdateBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a spacing token in the styleguide
         * @summary Update styleguide spacing token
         * @param {string} styleguideId Styleguide id
         * @param {string} spacingTokenId Spacing token id
         * @param {SpacingTokenUpdateBody} spacingTokenUpdateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStyleguideSpacingToken(styleguideId: string, spacingTokenId: string, spacingTokenUpdateBody: SpacingTokenUpdateBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStyleguideSpacingToken(styleguideId, spacingTokenId, spacingTokenUpdateBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};


/**
 * Search parameters for getProjectSpacingSections operation in SpacingApi.
 * @export
 * @interface SpacingApiGetProjectSpacingSectionsSearchParams
 */
export interface SpacingApiGetProjectSpacingSectionsSearchParams {
    /**
     * Pagination limit
     * @type {number}
     * @memberof SpacingApiGetProjectSpacingSectionsSearchParams
     */
    readonly limit?: number;

    /**
     * Pagination offset
     * @type {number}
     * @memberof SpacingApiGetProjectSpacingSectionsSearchParams
     */
    readonly offset?: number;
}

/**
 * Search parameters for getProjectSpacingTokens operation in SpacingApi.
 * @export
 * @interface SpacingApiGetProjectSpacingTokensSearchParams
 */
export interface SpacingApiGetProjectSpacingTokensSearchParams {
    /**
     * Pagination limit
     * @type {number}
     * @memberof SpacingApiGetProjectSpacingTokensSearchParams
     */
    readonly limit?: number;

    /**
     * Pagination offset
     * @type {number}
     * @memberof SpacingApiGetProjectSpacingTokensSearchParams
     */
    readonly offset?: number;
}

/**
 * Search parameters for getStyleguideSpacingSections operation in SpacingApi.
 * @export
 * @interface SpacingApiGetStyleguideSpacingSectionsSearchParams
 */
export interface SpacingApiGetStyleguideSpacingSectionsSearchParams {
    /**
     * Pagination limit
     * @type {number}
     * @memberof SpacingApiGetStyleguideSpacingSectionsSearchParams
     */
    readonly limit?: number;

    /**
     * Pagination offset
     * @type {number}
     * @memberof SpacingApiGetStyleguideSpacingSectionsSearchParams
     */
    readonly offset?: number;

    /**
     * Reference project id
     * @type {string}
     * @memberof SpacingApiGetStyleguideSpacingSectionsSearchParams
     */
    readonly linkedProject?: string;

    /**
     * Reference styleguide id
     * @type {string}
     * @memberof SpacingApiGetStyleguideSpacingSectionsSearchParams
     */
    readonly linkedStyleguide?: string;
}

/**
 * Search parameters for getStyleguideSpacingTokens operation in SpacingApi.
 * @export
 * @interface SpacingApiGetStyleguideSpacingTokensSearchParams
 */
export interface SpacingApiGetStyleguideSpacingTokensSearchParams {
    /**
     * Pagination limit
     * @type {number}
     * @memberof SpacingApiGetStyleguideSpacingTokensSearchParams
     */
    readonly limit?: number;

    /**
     * Pagination offset
     * @type {number}
     * @memberof SpacingApiGetStyleguideSpacingTokensSearchParams
     */
    readonly offset?: number;

    /**
     * Reference project id
     * @type {string}
     * @memberof SpacingApiGetStyleguideSpacingTokensSearchParams
     */
    readonly linkedProject?: string;

    /**
     * Reference styleguide id
     * @type {string}
     * @memberof SpacingApiGetStyleguideSpacingTokensSearchParams
     */
    readonly linkedStyleguide?: string;
}




/**
 * SpacingApi - object-oriented interface
 * @export
 * @class SpacingApi
 * @extends {BaseAPI}
 */
export class SpacingApi extends BaseAPI {
    /**
     * List all spacing sections of the project
     * @summary Get spacing sections of the project
     * @param {string} projectId Project id
     * @param {SpacingApiGetProjectSpacingSectionsSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpacingApi
     */
    public async getProjectSpacingSections(projectId: string, searchParams: SpacingApiGetProjectSpacingSectionsSearchParams = {}, options?: any) : Promise<AxiosResponse<Array<SpacingSection>>> {
        const spacingApiFp = SpacingApiFp(this.configuration);
        const request = await spacingApiFp.getProjectSpacingSections(projectId, searchParams.limit, searchParams.offset, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: response.data.map(transformJSONToSpacingSection)
        };
    }

    /**
     * List all spacing tokens of the project
     * @summary Get spacing tokens of the project
     * @param {string} projectId Project id
     * @param {SpacingApiGetProjectSpacingTokensSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpacingApi
     */
    public async getProjectSpacingTokens(projectId: string, searchParams: SpacingApiGetProjectSpacingTokensSearchParams = {}, options?: any) : Promise<AxiosResponse<Array<SpacingToken>>> {
        const spacingApiFp = SpacingApiFp(this.configuration);
        const request = await spacingApiFp.getProjectSpacingTokens(projectId, searchParams.limit, searchParams.offset, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: response.data.map(transformJSONToSpacingToken)
        };
    }

    /**
     * List all spacing sections of the styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access. 
     * @summary Get spacing sections of the styleguide
     * @param {string} styleguideId Styleguide id
     * @param {SpacingApiGetStyleguideSpacingSectionsSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpacingApi
     */
    public async getStyleguideSpacingSections(styleguideId: string, searchParams: SpacingApiGetStyleguideSpacingSectionsSearchParams = {}, options?: any) : Promise<AxiosResponse<Array<SpacingSection>>> {
        const spacingApiFp = SpacingApiFp(this.configuration);
        const request = await spacingApiFp.getStyleguideSpacingSections(styleguideId, searchParams.limit, searchParams.offset, searchParams.linkedProject, searchParams.linkedStyleguide, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: response.data.map(transformJSONToSpacingSection)
        };
    }

    /**
     * List all spacing tokens of the styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access. 
     * @summary Get spacing tokens of the styleguide
     * @param {string} styleguideId Styleguide id
     * @param {SpacingApiGetStyleguideSpacingTokensSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpacingApi
     */
    public async getStyleguideSpacingTokens(styleguideId: string, searchParams: SpacingApiGetStyleguideSpacingTokensSearchParams = {}, options?: any) : Promise<AxiosResponse<Array<SpacingToken>>> {
        const spacingApiFp = SpacingApiFp(this.configuration);
        const request = await spacingApiFp.getStyleguideSpacingTokens(styleguideId, searchParams.limit, searchParams.offset, searchParams.linkedProject, searchParams.linkedStyleguide, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: response.data.map(transformJSONToSpacingToken)
        };
    }

    /**
     * Update a spacing token in the project\'s local styleguide
     * @summary Update project spacing token
     * @param {string} projectId Project id
     * @param {string} spacingTokenId Spacing token id
     * @param {SpacingTokenUpdateBody} spacingTokenUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpacingApi
     */
    public async updateProjectSpacingToken(projectId: string, spacingTokenId: string, spacingTokenUpdateBody: SpacingTokenUpdateBody, options?: any) : Promise<AxiosResponse<void>> {
        const spacingApiFp = SpacingApiFp(this.configuration);
        const request = await spacingApiFp.updateProjectSpacingToken(projectId, spacingTokenId, spacingTokenUpdateBody, options);
        const response = await request(this.axios, this.basePath);
        return response;
    }

    /**
     * Update a spacing token in the styleguide
     * @summary Update styleguide spacing token
     * @param {string} styleguideId Styleguide id
     * @param {string} spacingTokenId Spacing token id
     * @param {SpacingTokenUpdateBody} spacingTokenUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpacingApi
     */
    public async updateStyleguideSpacingToken(styleguideId: string, spacingTokenId: string, spacingTokenUpdateBody: SpacingTokenUpdateBody, options?: any) : Promise<AxiosResponse<void>> {
        const spacingApiFp = SpacingApiFp(this.configuration);
        const request = await spacingApiFp.updateStyleguideSpacingToken(styleguideId, spacingTokenId, spacingTokenUpdateBody, options);
        const response = await request(this.axios, this.basePath);
        return response;
    }
}
