/* tslint:disable */
/* eslint-disable */
/**
 * Zeplin API
 * Access your resources in Zeplin
 *
 * Contact: support@zeplin.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosResponse } from 'axios';
import FormData from 'form-data';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import {
    DesignTokens,
    transformDesignTokensToJSON,
    transformJSONToDesignTokens
} from '../models';
// @ts-ignore
import {
    ErrorResponse,
    transformErrorResponseToJSON,
    transformJSONToErrorResponse
} from '../models';
// @ts-ignore
import {
    Project,
    transformProjectToJSON,
    transformJSONToProject
} from '../models';
// @ts-ignore
import {
    Styleguide,
    transformStyleguideToJSON,
    transformJSONToStyleguide
} from '../models';
// @ts-ignore
import {
    StyleguideMember,
    transformStyleguideMemberToJSON,
    transformJSONToStyleguideMember
} from '../models';
// @ts-ignore
import {
    StyleguideStatusEnum,
    transformStyleguideStatusEnumToJSON,
    transformJSONToStyleguideStatusEnum
} from '../models';
// @ts-ignore
import {
    StyleguideUpdateBody,
    transformStyleguideUpdateBodyToJSON,
    transformJSONToStyleguideUpdateBody
} from '../models';
/**
 * StyleguidesApi - axios parameter creator
 * @export
 */
export const StyleguidesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a single styleguide that user has access.  User is considered eligible to access a styleguide if any of the following conditions is met: * User is a member of the styleguide * User is a member of the organization that the styleguide belongs to * User is a member of a project which is linked to the styleguide (using `linked_project` parameter) * User is a member of a project and the styleguide is an ancestor of the project\'s linked styleguide (using `linked_project` parameter) * User is a member of a styleguide that the styleguide is one of its ancestors (using `linked_styleguide` parameter) 
         * @summary Get a single styleguide
         * @param {string} styleguideId Styleguide id
         * @param {string} [linkedProject] Reference project id
         * @param {string} [linkedStyleguide] Reference styleguide id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStyleguide: async (styleguideId: string, linkedProject?: string, linkedStyleguide?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'styleguideId' is not null or undefined
            assertParamExists('getStyleguide', 'styleguideId', styleguideId)
            const localVarPath = `/v1/styleguides/{styleguide_id}`
                .replace(`{${"styleguide_id"}}`, encodeURIComponent(String(styleguideId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (linkedProject !== undefined) {
                localVarQueryParameter['linked_project'] = linkedProject;
            }

            if (linkedStyleguide !== undefined) {
                localVarQueryParameter['linked_styleguide'] = linkedStyleguide;
            }

    
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch all design tokens of the styleguide
         * @summary Get styleguide design tokens
         * @param {string} styleguideId Styleguide id
         * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
         * @param {'kebab' | 'snake' | 'camel' | 'pascal' | 'constant' | 'original'} [tokenNameCase] Case for token names
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStyleguideDesignTokens: async (styleguideId: string, includeLinkedStyleguides?: boolean, tokenNameCase?: 'kebab' | 'snake' | 'camel' | 'pascal' | 'constant' | 'original', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'styleguideId' is not null or undefined
            assertParamExists('getStyleguideDesignTokens', 'styleguideId', styleguideId)
            const localVarPath = `/v1/styleguides/{styleguide_id}/design_tokens`
                .replace(`{${"styleguide_id"}}`, encodeURIComponent(String(styleguideId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (includeLinkedStyleguides !== undefined) {
                localVarQueryParameter['include_linked_styleguides'] = includeLinkedStyleguides;
            }

            if (tokenNameCase !== undefined) {
                localVarQueryParameter['token_name_case'] = tokenNameCase;
            }

    
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all projects linked to the styleguide
         * @summary Get linked projects
         * @param {string} styleguideId Styleguide id
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStyleguideLinkedProjects: async (styleguideId: string, limit?: number, offset?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'styleguideId' is not null or undefined
            assertParamExists('getStyleguideLinkedProjects', 'styleguideId', styleguideId)
            const localVarPath = `/v1/styleguides/{styleguide_id}/linked_projects`
                .replace(`{${"styleguide_id"}}`, encodeURIComponent(String(styleguideId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

    
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns members of a styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access. 
         * @summary Get styleguide members
         * @param {string} styleguideId Styleguide id
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {string} [linkedProject] Reference project id
         * @param {string} [linkedStyleguide] Reference styleguide id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStyleguideMembers: async (styleguideId: string, limit?: number, offset?: number, linkedProject?: string, linkedStyleguide?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'styleguideId' is not null or undefined
            assertParamExists('getStyleguideMembers', 'styleguideId', styleguideId)
            const localVarPath = `/v1/styleguides/{styleguide_id}/members`
                .replace(`{${"styleguide_id"}}`, encodeURIComponent(String(styleguideId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (linkedProject !== undefined) {
                localVarQueryParameter['linked_project'] = linkedProject;
            }

            if (linkedStyleguide !== undefined) {
                localVarQueryParameter['linked_styleguide'] = linkedStyleguide;
            }

    
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all styleguides user is a member of unless `linked_project` or `linked_styleguide` parameter is given.  If `linked_project` parameter is provided, lists styleguide linked to the given project and its ancestors. Returns error if the project referenced with `linked_project` is not accessible.  Simiarly, lists styleguide linked to the given styleguide and its ancestors if `linked_styleguide` parameter is provided. Returns error if the styleguide referenced with `linked_styleguide` is not accessible.  ☝️ `linked_project` and `linked_styleguide` should not be used in conjunction.   Also, styleguides can be filtered by workspace using the `workspace` parameter. `workspace` parameter is ignored when `linked_project` or `linked_styleguide` parameter is provided. 
         * @summary Get all member styleguides
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {string} [workspace] Workspace of the styleguide, it can be &#x60;personal&#x60; or the id of organization
         * @param {StyleguideStatusEnum} [status] Filter by status
         * @param {string} [linkedProject] Reference project id
         * @param {string} [linkedStyleguide] Reference styleguide id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStyleguides: async (limit?: number, offset?: number, workspace?: string, status?: StyleguideStatusEnum, linkedProject?: string, linkedStyleguide?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/styleguides`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (workspace !== undefined) {
                localVarQueryParameter['workspace'] = workspace;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (linkedProject !== undefined) {
                localVarQueryParameter['linked_project'] = linkedProject;
            }

            if (linkedStyleguide !== undefined) {
                localVarQueryParameter['linked_styleguide'] = linkedStyleguide;
            }

    
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a styleguide\'s name and description
         * @summary Update a styleguide
         * @param {string} styleguideId Styleguide id
         * @param {StyleguideUpdateBody} styleguideUpdateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStyleguide: async (styleguideId: string, styleguideUpdateBody: StyleguideUpdateBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'styleguideId' is not null or undefined
            assertParamExists('updateStyleguide', 'styleguideId', styleguideId)
            // verify required parameter 'styleguideUpdateBody' is not null or undefined
            assertParamExists('updateStyleguide', 'styleguideUpdateBody', styleguideUpdateBody)
            const localVarPath = `/v1/styleguides/{styleguide_id}`
                .replace(`{${"styleguide_id"}}`, encodeURIComponent(String(styleguideId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transformStyleguideUpdateBodyToJSON(styleguideUpdateBody), localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StyleguidesApi - functional programming interface
 * @export
 */
export const StyleguidesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StyleguidesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a single styleguide that user has access.  User is considered eligible to access a styleguide if any of the following conditions is met: * User is a member of the styleguide * User is a member of the organization that the styleguide belongs to * User is a member of a project which is linked to the styleguide (using `linked_project` parameter) * User is a member of a project and the styleguide is an ancestor of the project\'s linked styleguide (using `linked_project` parameter) * User is a member of a styleguide that the styleguide is one of its ancestors (using `linked_styleguide` parameter) 
         * @summary Get a single styleguide
         * @param {string} styleguideId Styleguide id
         * @param {string} [linkedProject] Reference project id
         * @param {string} [linkedStyleguide] Reference styleguide id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStyleguide(styleguideId: string, linkedProject?: string, linkedStyleguide?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStyleguide(styleguideId, linkedProject, linkedStyleguide, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch all design tokens of the styleguide
         * @summary Get styleguide design tokens
         * @param {string} styleguideId Styleguide id
         * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
         * @param {'kebab' | 'snake' | 'camel' | 'pascal' | 'constant' | 'original'} [tokenNameCase] Case for token names
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStyleguideDesignTokens(styleguideId: string, includeLinkedStyleguides?: boolean, tokenNameCase?: 'kebab' | 'snake' | 'camel' | 'pascal' | 'constant' | 'original', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStyleguideDesignTokens(styleguideId, includeLinkedStyleguides, tokenNameCase, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all projects linked to the styleguide
         * @summary Get linked projects
         * @param {string} styleguideId Styleguide id
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStyleguideLinkedProjects(styleguideId: string, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStyleguideLinkedProjects(styleguideId, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns members of a styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access. 
         * @summary Get styleguide members
         * @param {string} styleguideId Styleguide id
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {string} [linkedProject] Reference project id
         * @param {string} [linkedStyleguide] Reference styleguide id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStyleguideMembers(styleguideId: string, limit?: number, offset?: number, linkedProject?: string, linkedStyleguide?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStyleguideMembers(styleguideId, limit, offset, linkedProject, linkedStyleguide, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists all styleguides user is a member of unless `linked_project` or `linked_styleguide` parameter is given.  If `linked_project` parameter is provided, lists styleguide linked to the given project and its ancestors. Returns error if the project referenced with `linked_project` is not accessible.  Simiarly, lists styleguide linked to the given styleguide and its ancestors if `linked_styleguide` parameter is provided. Returns error if the styleguide referenced with `linked_styleguide` is not accessible.  ☝️ `linked_project` and `linked_styleguide` should not be used in conjunction.   Also, styleguides can be filtered by workspace using the `workspace` parameter. `workspace` parameter is ignored when `linked_project` or `linked_styleguide` parameter is provided. 
         * @summary Get all member styleguides
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {string} [workspace] Workspace of the styleguide, it can be &#x60;personal&#x60; or the id of organization
         * @param {StyleguideStatusEnum} [status] Filter by status
         * @param {string} [linkedProject] Reference project id
         * @param {string} [linkedStyleguide] Reference styleguide id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStyleguides(limit?: number, offset?: number, workspace?: string, status?: StyleguideStatusEnum, linkedProject?: string, linkedStyleguide?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStyleguides(limit, offset, workspace, status, linkedProject, linkedStyleguide, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a styleguide\'s name and description
         * @summary Update a styleguide
         * @param {string} styleguideId Styleguide id
         * @param {StyleguideUpdateBody} styleguideUpdateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStyleguide(styleguideId: string, styleguideUpdateBody: StyleguideUpdateBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStyleguide(styleguideId, styleguideUpdateBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};


/**
 * Search parameters for getStyleguide operation in StyleguidesApi.
 * @export
 * @interface StyleguidesApiGetStyleguideSearchParams
 */
export interface StyleguidesApiGetStyleguideSearchParams {
    /**
     * Reference project id
     * @type {string}
     * @memberof StyleguidesApiGetStyleguideSearchParams
     */
    readonly linkedProject?: string;

    /**
     * Reference styleguide id
     * @type {string}
     * @memberof StyleguidesApiGetStyleguideSearchParams
     */
    readonly linkedStyleguide?: string;
}

/**
 * Search parameters for getStyleguideDesignTokens operation in StyleguidesApi.
 * @export
 * @interface StyleguidesApiGetStyleguideDesignTokensSearchParams
 */
export interface StyleguidesApiGetStyleguideDesignTokensSearchParams {
    /**
     * Whether to include linked styleguides or not
     * @type {boolean}
     * @memberof StyleguidesApiGetStyleguideDesignTokensSearchParams
     */
    readonly includeLinkedStyleguides?: boolean;

    /**
     * Case for token names
     * @type {'kebab' | 'snake' | 'camel' | 'pascal' | 'constant' | 'original'}
     * @memberof StyleguidesApiGetStyleguideDesignTokensSearchParams
     */
    readonly tokenNameCase?: 'kebab' | 'snake' | 'camel' | 'pascal' | 'constant' | 'original';
}

/**
 * Search parameters for getStyleguideLinkedProjects operation in StyleguidesApi.
 * @export
 * @interface StyleguidesApiGetStyleguideLinkedProjectsSearchParams
 */
export interface StyleguidesApiGetStyleguideLinkedProjectsSearchParams {
    /**
     * Pagination limit
     * @type {number}
     * @memberof StyleguidesApiGetStyleguideLinkedProjectsSearchParams
     */
    readonly limit?: number;

    /**
     * Pagination offset
     * @type {number}
     * @memberof StyleguidesApiGetStyleguideLinkedProjectsSearchParams
     */
    readonly offset?: number;
}

/**
 * Search parameters for getStyleguideMembers operation in StyleguidesApi.
 * @export
 * @interface StyleguidesApiGetStyleguideMembersSearchParams
 */
export interface StyleguidesApiGetStyleguideMembersSearchParams {
    /**
     * Pagination limit
     * @type {number}
     * @memberof StyleguidesApiGetStyleguideMembersSearchParams
     */
    readonly limit?: number;

    /**
     * Pagination offset
     * @type {number}
     * @memberof StyleguidesApiGetStyleguideMembersSearchParams
     */
    readonly offset?: number;

    /**
     * Reference project id
     * @type {string}
     * @memberof StyleguidesApiGetStyleguideMembersSearchParams
     */
    readonly linkedProject?: string;

    /**
     * Reference styleguide id
     * @type {string}
     * @memberof StyleguidesApiGetStyleguideMembersSearchParams
     */
    readonly linkedStyleguide?: string;
}

/**
 * Search parameters for getStyleguides operation in StyleguidesApi.
 * @export
 * @interface StyleguidesApiGetStyleguidesSearchParams
 */
export interface StyleguidesApiGetStyleguidesSearchParams {
    /**
     * Pagination limit
     * @type {number}
     * @memberof StyleguidesApiGetStyleguidesSearchParams
     */
    readonly limit?: number;

    /**
     * Pagination offset
     * @type {number}
     * @memberof StyleguidesApiGetStyleguidesSearchParams
     */
    readonly offset?: number;

    /**
     * Workspace of the styleguide, it can be &#x60;personal&#x60; or the id of organization
     * @type {string}
     * @memberof StyleguidesApiGetStyleguidesSearchParams
     */
    readonly workspace?: string;

    /**
     * Filter by status
     * @type {StyleguideStatusEnum}
     * @memberof StyleguidesApiGetStyleguidesSearchParams
     */
    readonly status?: StyleguideStatusEnum;

    /**
     * Reference project id
     * @type {string}
     * @memberof StyleguidesApiGetStyleguidesSearchParams
     */
    readonly linkedProject?: string;

    /**
     * Reference styleguide id
     * @type {string}
     * @memberof StyleguidesApiGetStyleguidesSearchParams
     */
    readonly linkedStyleguide?: string;
}



/**
 * StyleguidesApi - object-oriented interface
 * @export
 * @class StyleguidesApi
 * @extends {BaseAPI}
 */
export class StyleguidesApi extends BaseAPI {
    /**
     * Returns a single styleguide that user has access.  User is considered eligible to access a styleguide if any of the following conditions is met: * User is a member of the styleguide * User is a member of the organization that the styleguide belongs to * User is a member of a project which is linked to the styleguide (using `linked_project` parameter) * User is a member of a project and the styleguide is an ancestor of the project\'s linked styleguide (using `linked_project` parameter) * User is a member of a styleguide that the styleguide is one of its ancestors (using `linked_styleguide` parameter) 
     * @summary Get a single styleguide
     * @param {string} styleguideId Styleguide id
     * @param {StyleguidesApiGetStyleguideSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StyleguidesApi
     */
    public async getStyleguide(styleguideId: string, searchParams: StyleguidesApiGetStyleguideSearchParams = {}, options?: any) : Promise<AxiosResponse<Styleguide>> {
        const styleguidesApiFp = StyleguidesApiFp(this.configuration);
        const request = await styleguidesApiFp.getStyleguide(styleguideId, searchParams.linkedProject, searchParams.linkedStyleguide, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: transformJSONToStyleguide(response.data)
        };
    }

    /**
     * Fetch all design tokens of the styleguide
     * @summary Get styleguide design tokens
     * @param {string} styleguideId Styleguide id
     * @param {StyleguidesApiGetStyleguideDesignTokensSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StyleguidesApi
     */
    public async getStyleguideDesignTokens(styleguideId: string, searchParams: StyleguidesApiGetStyleguideDesignTokensSearchParams = {}, options?: any) : Promise<AxiosResponse<DesignTokens>> {
        const styleguidesApiFp = StyleguidesApiFp(this.configuration);
        const request = await styleguidesApiFp.getStyleguideDesignTokens(styleguideId, searchParams.includeLinkedStyleguides, searchParams.tokenNameCase, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: transformJSONToDesignTokens(response.data)
        };
    }

    /**
     * List all projects linked to the styleguide
     * @summary Get linked projects
     * @param {string} styleguideId Styleguide id
     * @param {StyleguidesApiGetStyleguideLinkedProjectsSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StyleguidesApi
     */
    public async getStyleguideLinkedProjects(styleguideId: string, searchParams: StyleguidesApiGetStyleguideLinkedProjectsSearchParams = {}, options?: any) : Promise<AxiosResponse<Array<Project>>> {
        const styleguidesApiFp = StyleguidesApiFp(this.configuration);
        const request = await styleguidesApiFp.getStyleguideLinkedProjects(styleguideId, searchParams.limit, searchParams.offset, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: response.data.map(transformJSONToProject)
        };
    }

    /**
     * Returns members of a styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access. 
     * @summary Get styleguide members
     * @param {string} styleguideId Styleguide id
     * @param {StyleguidesApiGetStyleguideMembersSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StyleguidesApi
     */
    public async getStyleguideMembers(styleguideId: string, searchParams: StyleguidesApiGetStyleguideMembersSearchParams = {}, options?: any) : Promise<AxiosResponse<Array<StyleguideMember>>> {
        const styleguidesApiFp = StyleguidesApiFp(this.configuration);
        const request = await styleguidesApiFp.getStyleguideMembers(styleguideId, searchParams.limit, searchParams.offset, searchParams.linkedProject, searchParams.linkedStyleguide, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: response.data.map(transformJSONToStyleguideMember)
        };
    }

    /**
     * Lists all styleguides user is a member of unless `linked_project` or `linked_styleguide` parameter is given.  If `linked_project` parameter is provided, lists styleguide linked to the given project and its ancestors. Returns error if the project referenced with `linked_project` is not accessible.  Simiarly, lists styleguide linked to the given styleguide and its ancestors if `linked_styleguide` parameter is provided. Returns error if the styleguide referenced with `linked_styleguide` is not accessible.  ☝️ `linked_project` and `linked_styleguide` should not be used in conjunction.   Also, styleguides can be filtered by workspace using the `workspace` parameter. `workspace` parameter is ignored when `linked_project` or `linked_styleguide` parameter is provided. 
     * @summary Get all member styleguides
     * @param {StyleguidesApiGetStyleguidesSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StyleguidesApi
     */
    public async getStyleguides(searchParams: StyleguidesApiGetStyleguidesSearchParams = {}, options?: any) : Promise<AxiosResponse<Array<Styleguide>>> {
        const styleguidesApiFp = StyleguidesApiFp(this.configuration);
        const request = await styleguidesApiFp.getStyleguides(searchParams.limit, searchParams.offset, searchParams.workspace, searchParams.status, searchParams.linkedProject, searchParams.linkedStyleguide, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: response.data.map(transformJSONToStyleguide)
        };
    }

    /**
     * Update a styleguide\'s name and description
     * @summary Update a styleguide
     * @param {string} styleguideId Styleguide id
     * @param {StyleguideUpdateBody} styleguideUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StyleguidesApi
     */
    public async updateStyleguide(styleguideId: string, styleguideUpdateBody: StyleguideUpdateBody, options?: any) : Promise<AxiosResponse<void>> {
        const styleguidesApiFp = StyleguidesApiFp(this.configuration);
        const request = await styleguidesApiFp.updateStyleguide(styleguideId, styleguideUpdateBody, options);
        const response = await request(this.axios, this.basePath);
        return response;
    }
}
