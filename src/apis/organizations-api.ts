/* tslint:disable */
/* eslint-disable */
/**
 * Zeplin API
 * Access your resources in Zeplin
 *
 * Contact: support@zeplin.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosResponse } from 'axios';
import FormData from 'form-data';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import {
    ErrorResponse,
    transformErrorResponseToJSON,
    transformJSONToErrorResponse
} from '../models';
// @ts-ignore
import {
    Organization,
    transformOrganizationToJSON,
    transformJSONToOrganization
} from '../models';
// @ts-ignore
import {
    OrganizationBilling,
    transformOrganizationBillingToJSON,
    transformJSONToOrganizationBilling
} from '../models';
// @ts-ignore
import {
    OrganizationMember,
    transformOrganizationMemberToJSON,
    transformJSONToOrganizationMember
} from '../models';
// @ts-ignore
import {
    OrganizationMemberInviteBody,
    transformOrganizationMemberInviteBodyToJSON,
    transformJSONToOrganizationMemberInviteBody
} from '../models';
// @ts-ignore
import {
    OrganizationMemberUpdateBody,
    transformOrganizationMemberUpdateBodyToJSON,
    transformJSONToOrganizationMemberUpdateBody
} from '../models';
// @ts-ignore
import {
    OrganizationSummary,
    transformOrganizationSummaryToJSON,
    transformJSONToOrganizationSummary
} from '../models';
// @ts-ignore
import {
    Project,
    transformProjectToJSON,
    transformJSONToProject
} from '../models';
// @ts-ignore
import {
    Styleguide,
    transformStyleguideToJSON,
    transformJSONToStyleguide
} from '../models';
// @ts-ignore
import {
    User,
    transformUserToJSON,
    transformJSONToUser
} from '../models';
// @ts-ignore
import {
    WorkflowStatus,
    transformWorkflowStatusToJSON,
    transformJSONToWorkflowStatus
} from '../models';
/**
 * OrganizationsApi - axios parameter creator
 * @export
 */
export const OrganizationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get details of the organization
         * @summary Get a single organization
         * @param {string} organizationId Organization id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganization: async (organizationId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getOrganization', 'organizationId', organizationId)
            const localVarPath = `/v1/organizations/{organization_id}`
                .replace(`{${"organization_id"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all aliens in the organization
         * @summary Get organization aliens
         * @param {string} organizationId Organization id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationAliens: async (organizationId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getOrganizationAliens', 'organizationId', organizationId)
            const localVarPath = `/v1/organizations/{organization_id}/aliens`
                .replace(`{${"organization_id"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get total and used seat count in the organization
         * @summary Get organization billing details
         * @param {string} organizationId Organization id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationBilling: async (organizationId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getOrganizationBilling', 'organizationId', organizationId)
            const localVarPath = `/v1/organizations/{organization_id}/billing`
                .replace(`{${"organization_id"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of projects that an organization member is a part of
         * @summary Get a member\'s projects
         * @param {string} organizationId Organization id
         * @param {string} memberId Member id
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationMemberProjects: async (organizationId: string, memberId: string, limit?: number, offset?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getOrganizationMemberProjects', 'organizationId', organizationId)
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('getOrganizationMemberProjects', 'memberId', memberId)
            const localVarPath = `/v1/organizations/{organization_id}/members/{member_id}/projects`
                .replace(`{${"organization_id"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"member_id"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

    
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of styleguides that an organization member is a part of
         * @summary Get a member\'s styleguides
         * @param {string} organizationId Organization id
         * @param {string} memberId Member id
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationMemberStyleguides: async (organizationId: string, memberId: string, limit?: number, offset?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getOrganizationMemberStyleguides', 'organizationId', organizationId)
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('getOrganizationMemberStyleguides', 'memberId', memberId)
            const localVarPath = `/v1/organizations/{organization_id}/members/{member_id}/styleguides`
                .replace(`{${"organization_id"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"member_id"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

    
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all members in the organization
         * @summary Get organization members
         * @param {string} organizationId Organization id
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {Set<string>} [handle] Filter organization members by email, username or unique identifier of the user  ☝️Note that only organization admins (or higher) can filter members using email addresses.  Example: &#x60;?handle&#x3D;zozo&amp;handle&#x3D;5d9caaecb4a3fa9bc9718686&amp;handle&#x3D;zozo%40zeplin.io&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationMembers: async (organizationId: string, limit?: number, offset?: number, handle?: Set<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getOrganizationMembers', 'organizationId', organizationId)
            const localVarPath = `/v1/organizations/{organization_id}/members`
                .replace(`{${"organization_id"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (handle) {
                localVarQueryParameter['handle'] = Array.from(handle);
            }

    
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all projects that belong to the organization
         * @summary Get organization projects
         * @param {string} organizationId Organization id
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationProjects: async (organizationId: string, limit?: number, offset?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getOrganizationProjects', 'organizationId', organizationId)
            const localVarPath = `/v1/organizations/{organization_id}/projects`
                .replace(`{${"organization_id"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

    
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all styleguides that belong to the organization
         * @summary Get organization styleguides
         * @param {string} organizationId Organization id
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationStyleguides: async (organizationId: string, limit?: number, offset?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getOrganizationStyleguides', 'organizationId', organizationId)
            const localVarPath = `/v1/organizations/{organization_id}/styleguides`
                .replace(`{${"organization_id"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

    
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all workflow statuses that belong to the organization
         * @summary Get organization workflow statuses
         * @param {string} organizationId Organization id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationWorkflowStatuses: async (organizationId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getOrganizationWorkflowStatuses', 'organizationId', organizationId)
            const localVarPath = `/v1/organizations/{organization_id}/workflow_statuses`
                .replace(`{${"organization_id"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all organizations that user is a member of
         * @summary Get organizations
         * @param {Set<'owner' | 'admin' | 'editor' | 'member' | 'alien'>} [role] Filter by role  ☝️Note that the Developer role maps to &#x60;member&#x60; and the Reviewer role maps to &#x60;alien&#x60; in the API.  Example: &#x60;?role&#x3D;owner&amp;role&#x3D;admin&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizations: async (role?: Set<'owner' | 'admin' | 'editor' | 'member' | 'alien'>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (role) {
                localVarQueryParameter['role'] = Array.from(role);
            }

    
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invite a new organization member.  ☝️*Only organization admins (or higher) can invite members using **personal access tokens**. OAuth applications are not allowed.* 
         * @summary Invite member
         * @param {string} organizationId Organization id
         * @param {OrganizationMemberInviteBody} organizationMemberInviteBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteOrganizationMember: async (organizationId: string, organizationMemberInviteBody: OrganizationMemberInviteBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('inviteOrganizationMember', 'organizationId', organizationId)
            // verify required parameter 'organizationMemberInviteBody' is not null or undefined
            assertParamExists('inviteOrganizationMember', 'organizationMemberInviteBody', organizationMemberInviteBody)
            const localVarPath = `/v1/organizations/{organization_id}/members`
                .replace(`{${"organization_id"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transformOrganizationMemberInviteBodyToJSON(organizationMemberInviteBody), localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a member from organization.  ☝️*Only organization admins (or higher) can remove members using **personal access tokens**. OAuth applications are not allowed.* 
         * @summary Remove an organization member
         * @param {string} organizationId Organization id
         * @param {string} memberId Member id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeOrganizationMember: async (organizationId: string, memberId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('removeOrganizationMember', 'organizationId', organizationId)
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('removeOrganizationMember', 'memberId', memberId)
            const localVarPath = `/v1/organizations/{organization_id}/members/{member_id}`
                .replace(`{${"organization_id"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"member_id"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an organization member\'s role, access restriction, and tags.  ☝️*Only organization admins (or higher) can update members using **personal access tokens**. OAuth applications are not allowed.* 
         * @summary Update an organization member
         * @param {string} organizationId Organization id
         * @param {string} memberId Member id
         * @param {OrganizationMemberUpdateBody} organizationMemberUpdateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganizationMember: async (organizationId: string, memberId: string, organizationMemberUpdateBody: OrganizationMemberUpdateBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('updateOrganizationMember', 'organizationId', organizationId)
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('updateOrganizationMember', 'memberId', memberId)
            // verify required parameter 'organizationMemberUpdateBody' is not null or undefined
            assertParamExists('updateOrganizationMember', 'organizationMemberUpdateBody', organizationMemberUpdateBody)
            const localVarPath = `/v1/organizations/{organization_id}/members/{member_id}`
                .replace(`{${"organization_id"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"member_id"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transformOrganizationMemberUpdateBodyToJSON(organizationMemberUpdateBody), localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationsApi - functional programming interface
 * @export
 */
export const OrganizationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganizationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get details of the organization
         * @summary Get a single organization
         * @param {string} organizationId Organization id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganization(organizationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganization(organizationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all aliens in the organization
         * @summary Get organization aliens
         * @param {string} organizationId Organization id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationAliens(organizationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationAliens(organizationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get total and used seat count in the organization
         * @summary Get organization billing details
         * @param {string} organizationId Organization id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationBilling(organizationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationBilling(organizationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of projects that an organization member is a part of
         * @summary Get a member\'s projects
         * @param {string} organizationId Organization id
         * @param {string} memberId Member id
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationMemberProjects(organizationId: string, memberId: string, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationMemberProjects(organizationId, memberId, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of styleguides that an organization member is a part of
         * @summary Get a member\'s styleguides
         * @param {string} organizationId Organization id
         * @param {string} memberId Member id
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationMemberStyleguides(organizationId: string, memberId: string, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationMemberStyleguides(organizationId, memberId, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all members in the organization
         * @summary Get organization members
         * @param {string} organizationId Organization id
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {Set<string>} [handle] Filter organization members by email, username or unique identifier of the user  ☝️Note that only organization admins (or higher) can filter members using email addresses.  Example: &#x60;?handle&#x3D;zozo&amp;handle&#x3D;5d9caaecb4a3fa9bc9718686&amp;handle&#x3D;zozo%40zeplin.io&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationMembers(organizationId: string, limit?: number, offset?: number, handle?: Set<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationMembers(organizationId, limit, offset, handle, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all projects that belong to the organization
         * @summary Get organization projects
         * @param {string} organizationId Organization id
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationProjects(organizationId: string, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationProjects(organizationId, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all styleguides that belong to the organization
         * @summary Get organization styleguides
         * @param {string} organizationId Organization id
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationStyleguides(organizationId: string, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationStyleguides(organizationId, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all workflow statuses that belong to the organization
         * @summary Get organization workflow statuses
         * @param {string} organizationId Organization id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationWorkflowStatuses(organizationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationWorkflowStatuses(organizationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all organizations that user is a member of
         * @summary Get organizations
         * @param {Set<'owner' | 'admin' | 'editor' | 'member' | 'alien'>} [role] Filter by role  ☝️Note that the Developer role maps to &#x60;member&#x60; and the Reviewer role maps to &#x60;alien&#x60; in the API.  Example: &#x60;?role&#x3D;owner&amp;role&#x3D;admin&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizations(role?: Set<'owner' | 'admin' | 'editor' | 'member' | 'alien'>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizations(role, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Invite a new organization member.  ☝️*Only organization admins (or higher) can invite members using **personal access tokens**. OAuth applications are not allowed.* 
         * @summary Invite member
         * @param {string} organizationId Organization id
         * @param {OrganizationMemberInviteBody} organizationMemberInviteBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inviteOrganizationMember(organizationId: string, organizationMemberInviteBody: OrganizationMemberInviteBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inviteOrganizationMember(organizationId, organizationMemberInviteBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a member from organization.  ☝️*Only organization admins (or higher) can remove members using **personal access tokens**. OAuth applications are not allowed.* 
         * @summary Remove an organization member
         * @param {string} organizationId Organization id
         * @param {string} memberId Member id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeOrganizationMember(organizationId: string, memberId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeOrganizationMember(organizationId, memberId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an organization member\'s role, access restriction, and tags.  ☝️*Only organization admins (or higher) can update members using **personal access tokens**. OAuth applications are not allowed.* 
         * @summary Update an organization member
         * @param {string} organizationId Organization id
         * @param {string} memberId Member id
         * @param {OrganizationMemberUpdateBody} organizationMemberUpdateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrganizationMember(organizationId: string, memberId: string, organizationMemberUpdateBody: OrganizationMemberUpdateBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrganizationMember(organizationId, memberId, organizationMemberUpdateBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};





/**
 * Search parameters for getOrganizationMemberProjects operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiGetOrganizationMemberProjectsSearchParams
 */
export interface OrganizationsApiGetOrganizationMemberProjectsSearchParams {
    /**
     * Pagination limit
     * @type {number}
     * @memberof OrganizationsApiGetOrganizationMemberProjectsSearchParams
     */
    readonly limit?: number;

    /**
     * Pagination offset
     * @type {number}
     * @memberof OrganizationsApiGetOrganizationMemberProjectsSearchParams
     */
    readonly offset?: number;
}

/**
 * Search parameters for getOrganizationMemberStyleguides operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiGetOrganizationMemberStyleguidesSearchParams
 */
export interface OrganizationsApiGetOrganizationMemberStyleguidesSearchParams {
    /**
     * Pagination limit
     * @type {number}
     * @memberof OrganizationsApiGetOrganizationMemberStyleguidesSearchParams
     */
    readonly limit?: number;

    /**
     * Pagination offset
     * @type {number}
     * @memberof OrganizationsApiGetOrganizationMemberStyleguidesSearchParams
     */
    readonly offset?: number;
}

/**
 * Search parameters for getOrganizationMembers operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiGetOrganizationMembersSearchParams
 */
export interface OrganizationsApiGetOrganizationMembersSearchParams {
    /**
     * Pagination limit
     * @type {number}
     * @memberof OrganizationsApiGetOrganizationMembersSearchParams
     */
    readonly limit?: number;

    /**
     * Pagination offset
     * @type {number}
     * @memberof OrganizationsApiGetOrganizationMembersSearchParams
     */
    readonly offset?: number;

    /**
     * Filter organization members by email, username or unique identifier of the user  ☝️Note that only organization admins (or higher) can filter members using email addresses.  Example: &#x60;?handle&#x3D;zozo&amp;handle&#x3D;5d9caaecb4a3fa9bc9718686&amp;handle&#x3D;zozo%40zeplin.io&#x60; 
     * @type {Set<string>}
     * @memberof OrganizationsApiGetOrganizationMembersSearchParams
     */
    readonly handle?: Set<string>;
}

/**
 * Search parameters for getOrganizationProjects operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiGetOrganizationProjectsSearchParams
 */
export interface OrganizationsApiGetOrganizationProjectsSearchParams {
    /**
     * Pagination limit
     * @type {number}
     * @memberof OrganizationsApiGetOrganizationProjectsSearchParams
     */
    readonly limit?: number;

    /**
     * Pagination offset
     * @type {number}
     * @memberof OrganizationsApiGetOrganizationProjectsSearchParams
     */
    readonly offset?: number;
}

/**
 * Search parameters for getOrganizationStyleguides operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiGetOrganizationStyleguidesSearchParams
 */
export interface OrganizationsApiGetOrganizationStyleguidesSearchParams {
    /**
     * Pagination limit
     * @type {number}
     * @memberof OrganizationsApiGetOrganizationStyleguidesSearchParams
     */
    readonly limit?: number;

    /**
     * Pagination offset
     * @type {number}
     * @memberof OrganizationsApiGetOrganizationStyleguidesSearchParams
     */
    readonly offset?: number;
}


/**
 * Search parameters for getOrganizations operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiGetOrganizationsSearchParams
 */
export interface OrganizationsApiGetOrganizationsSearchParams {
    /**
     * Filter by role  ☝️Note that the Developer role maps to &#x60;member&#x60; and the Reviewer role maps to &#x60;alien&#x60; in the API.  Example: &#x60;?role&#x3D;owner&amp;role&#x3D;admin&#x60; 
     * @type {Set<'owner' | 'admin' | 'editor' | 'member' | 'alien'>}
     * @memberof OrganizationsApiGetOrganizationsSearchParams
     */
    readonly role?: Set<'owner' | 'admin' | 'editor' | 'member' | 'alien'>;
}





/**
 * OrganizationsApi - object-oriented interface
 * @export
 * @class OrganizationsApi
 * @extends {BaseAPI}
 */
export class OrganizationsApi extends BaseAPI {
    /**
     * Get details of the organization
     * @summary Get a single organization
     * @param {string} organizationId Organization id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public async getOrganization(organizationId: string, options?: any) : Promise<AxiosResponse<Organization>> {
        const organizationsApiFp = OrganizationsApiFp(this.configuration);
        const request = await organizationsApiFp.getOrganization(organizationId, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: transformJSONToOrganization(response.data)
        };
    }

    /**
     * List all aliens in the organization
     * @summary Get organization aliens
     * @param {string} organizationId Organization id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public async getOrganizationAliens(organizationId: string, options?: any) : Promise<AxiosResponse<Array<User>>> {
        const organizationsApiFp = OrganizationsApiFp(this.configuration);
        const request = await organizationsApiFp.getOrganizationAliens(organizationId, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: response.data.map(transformJSONToUser)
        };
    }

    /**
     * Get total and used seat count in the organization
     * @summary Get organization billing details
     * @param {string} organizationId Organization id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public async getOrganizationBilling(organizationId: string, options?: any) : Promise<AxiosResponse<OrganizationBilling>> {
        const organizationsApiFp = OrganizationsApiFp(this.configuration);
        const request = await organizationsApiFp.getOrganizationBilling(organizationId, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: transformJSONToOrganizationBilling(response.data)
        };
    }

    /**
     * Get a list of projects that an organization member is a part of
     * @summary Get a member\'s projects
     * @param {string} organizationId Organization id
     * @param {string} memberId Member id
     * @param {OrganizationsApiGetOrganizationMemberProjectsSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public async getOrganizationMemberProjects(organizationId: string, memberId: string, searchParams: OrganizationsApiGetOrganizationMemberProjectsSearchParams = {}, options?: any) : Promise<AxiosResponse<Array<Project>>> {
        const organizationsApiFp = OrganizationsApiFp(this.configuration);
        const request = await organizationsApiFp.getOrganizationMemberProjects(organizationId, memberId, searchParams.limit, searchParams.offset, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: response.data.map(transformJSONToProject)
        };
    }

    /**
     * Get a list of styleguides that an organization member is a part of
     * @summary Get a member\'s styleguides
     * @param {string} organizationId Organization id
     * @param {string} memberId Member id
     * @param {OrganizationsApiGetOrganizationMemberStyleguidesSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public async getOrganizationMemberStyleguides(organizationId: string, memberId: string, searchParams: OrganizationsApiGetOrganizationMemberStyleguidesSearchParams = {}, options?: any) : Promise<AxiosResponse<Array<Styleguide>>> {
        const organizationsApiFp = OrganizationsApiFp(this.configuration);
        const request = await organizationsApiFp.getOrganizationMemberStyleguides(organizationId, memberId, searchParams.limit, searchParams.offset, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: response.data.map(transformJSONToStyleguide)
        };
    }

    /**
     * List all members in the organization
     * @summary Get organization members
     * @param {string} organizationId Organization id
     * @param {OrganizationsApiGetOrganizationMembersSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public async getOrganizationMembers(organizationId: string, searchParams: OrganizationsApiGetOrganizationMembersSearchParams = {}, options?: any) : Promise<AxiosResponse<Array<OrganizationMember>>> {
        const organizationsApiFp = OrganizationsApiFp(this.configuration);
        const request = await organizationsApiFp.getOrganizationMembers(organizationId, searchParams.limit, searchParams.offset, searchParams.handle, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: response.data.map(transformJSONToOrganizationMember)
        };
    }

    /**
     * List all projects that belong to the organization
     * @summary Get organization projects
     * @param {string} organizationId Organization id
     * @param {OrganizationsApiGetOrganizationProjectsSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public async getOrganizationProjects(organizationId: string, searchParams: OrganizationsApiGetOrganizationProjectsSearchParams = {}, options?: any) : Promise<AxiosResponse<Array<Project>>> {
        const organizationsApiFp = OrganizationsApiFp(this.configuration);
        const request = await organizationsApiFp.getOrganizationProjects(organizationId, searchParams.limit, searchParams.offset, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: response.data.map(transformJSONToProject)
        };
    }

    /**
     * List all styleguides that belong to the organization
     * @summary Get organization styleguides
     * @param {string} organizationId Organization id
     * @param {OrganizationsApiGetOrganizationStyleguidesSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public async getOrganizationStyleguides(organizationId: string, searchParams: OrganizationsApiGetOrganizationStyleguidesSearchParams = {}, options?: any) : Promise<AxiosResponse<Array<Styleguide>>> {
        const organizationsApiFp = OrganizationsApiFp(this.configuration);
        const request = await organizationsApiFp.getOrganizationStyleguides(organizationId, searchParams.limit, searchParams.offset, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: response.data.map(transformJSONToStyleguide)
        };
    }

    /**
     * List all workflow statuses that belong to the organization
     * @summary Get organization workflow statuses
     * @param {string} organizationId Organization id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public async getOrganizationWorkflowStatuses(organizationId: string, options?: any) : Promise<AxiosResponse<Array<WorkflowStatus>>> {
        const organizationsApiFp = OrganizationsApiFp(this.configuration);
        const request = await organizationsApiFp.getOrganizationWorkflowStatuses(organizationId, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: response.data.map(transformJSONToWorkflowStatus)
        };
    }

    /**
     * List all organizations that user is a member of
     * @summary Get organizations
     * @param {OrganizationsApiGetOrganizationsSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public async getOrganizations(searchParams: OrganizationsApiGetOrganizationsSearchParams = {}, options?: any) : Promise<AxiosResponse<Array<OrganizationSummary>>> {
        const organizationsApiFp = OrganizationsApiFp(this.configuration);
        const request = await organizationsApiFp.getOrganizations(searchParams.role, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: response.data.map(transformJSONToOrganizationSummary)
        };
    }

    /**
     * Invite a new organization member.  ☝️*Only organization admins (or higher) can invite members using **personal access tokens**. OAuth applications are not allowed.* 
     * @summary Invite member
     * @param {string} organizationId Organization id
     * @param {OrganizationMemberInviteBody} organizationMemberInviteBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public async inviteOrganizationMember(organizationId: string, organizationMemberInviteBody: OrganizationMemberInviteBody, options?: any) : Promise<AxiosResponse<OrganizationMember>> {
        const organizationsApiFp = OrganizationsApiFp(this.configuration);
        const request = await organizationsApiFp.inviteOrganizationMember(organizationId, organizationMemberInviteBody, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: transformJSONToOrganizationMember(response.data)
        };
    }

    /**
     * Remove a member from organization.  ☝️*Only organization admins (or higher) can remove members using **personal access tokens**. OAuth applications are not allowed.* 
     * @summary Remove an organization member
     * @param {string} organizationId Organization id
     * @param {string} memberId Member id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public async removeOrganizationMember(organizationId: string, memberId: string, options?: any) : Promise<AxiosResponse<void>> {
        const organizationsApiFp = OrganizationsApiFp(this.configuration);
        const request = await organizationsApiFp.removeOrganizationMember(organizationId, memberId, options);
        const response = await request(this.axios, this.basePath);
        return response;
    }

    /**
     * Update an organization member\'s role, access restriction, and tags.  ☝️*Only organization admins (or higher) can update members using **personal access tokens**. OAuth applications are not allowed.* 
     * @summary Update an organization member
     * @param {string} organizationId Organization id
     * @param {string} memberId Member id
     * @param {OrganizationMemberUpdateBody} organizationMemberUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public async updateOrganizationMember(organizationId: string, memberId: string, organizationMemberUpdateBody: OrganizationMemberUpdateBody, options?: any) : Promise<AxiosResponse<void>> {
        const organizationsApiFp = OrganizationsApiFp(this.configuration);
        const request = await organizationsApiFp.updateOrganizationMember(organizationId, memberId, organizationMemberUpdateBody, options);
        const response = await request(this.axios, this.basePath);
        return response;
    }
}
