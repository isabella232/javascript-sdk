/* tslint:disable */
/* eslint-disable */
/**
 * Zeplin API
 * Access your resources in Zeplin
 *
 * Contact: support@zeplin.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosResponse } from 'axios';
import FormData from 'form-data';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import {
    ErrorResponse,
    transformErrorResponseToJSON,
    transformJSONToErrorResponse
} from '../models';
// @ts-ignore
import {
    FlowBoard,
    transformFlowBoardToJSON,
    transformJSONToFlowBoard
} from '../models';
// @ts-ignore
import {
    FlowBoardConnector,
    transformFlowBoardConnectorToJSON,
    transformJSONToFlowBoardConnector
} from '../models';
// @ts-ignore
import {
    FlowBoardGroup,
    transformFlowBoardGroupToJSON,
    transformJSONToFlowBoardGroup
} from '../models';
// @ts-ignore
import {
    FlowBoardNode,
    transformFlowBoardNodeToJSON,
    transformJSONToFlowBoardNode
} from '../models';
/**
 * FlowsApi - axios parameter creator
 * @export
 */
export const FlowsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get flow board details related to a project
         * @summary Get a single project flow board
         * @param {string} projectId Project id
         * @param {string} flowBoardId Flow Board id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectFlowBoard: async (projectId: string, flowBoardId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProjectFlowBoard', 'projectId', projectId)
            // verify required parameter 'flowBoardId' is not null or undefined
            assertParamExists('getProjectFlowBoard', 'flowBoardId', flowBoardId)
            const localVarPath = `/v1/projects/{project_id}/flow_boards/{flow_board_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"flow_board_id"}}`, encodeURIComponent(String(flowBoardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details of the project flow board connector
         * @summary Get a single project flow board connector
         * @param {string} projectId Project id
         * @param {string} flowBoardId Flow Board id
         * @param {string} connectorId Board connector id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectFlowBoardConnector: async (projectId: string, flowBoardId: string, connectorId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProjectFlowBoardConnector', 'projectId', projectId)
            // verify required parameter 'flowBoardId' is not null or undefined
            assertParamExists('getProjectFlowBoardConnector', 'flowBoardId', flowBoardId)
            // verify required parameter 'connectorId' is not null or undefined
            assertParamExists('getProjectFlowBoardConnector', 'connectorId', connectorId)
            const localVarPath = `/v1/projects/{project_id}/flow_boards/{flow_board_id}/connectors/{connector_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"flow_board_id"}}`, encodeURIComponent(String(flowBoardId)))
                .replace(`{${"connector_id"}}`, encodeURIComponent(String(connectorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all connectors of the flow board in a project
         * @summary Get project flow board connectors
         * @param {string} projectId Project id
         * @param {string} flowBoardId Flow Board id
         * @param {string} [startingNodeId] Starting node id
         * @param {string} [endingNodeId] Ending node id
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectFlowBoardConnectors: async (projectId: string, flowBoardId: string, startingNodeId?: string, endingNodeId?: string, limit?: number, offset?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProjectFlowBoardConnectors', 'projectId', projectId)
            // verify required parameter 'flowBoardId' is not null or undefined
            assertParamExists('getProjectFlowBoardConnectors', 'flowBoardId', flowBoardId)
            const localVarPath = `/v1/projects/{project_id}/flow_boards/{flow_board_id}/connectors`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"flow_board_id"}}`, encodeURIComponent(String(flowBoardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (startingNodeId !== undefined) {
                localVarQueryParameter['starting_node_id'] = startingNodeId;
            }

            if (endingNodeId !== undefined) {
                localVarQueryParameter['ending_node_id'] = endingNodeId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

    
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all flow board groups in a project.
         * @summary Get project flow board groups
         * @param {string} projectId Project id
         * @param {string} flowBoardId Flow Board id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectFlowBoardGroups: async (projectId: string, flowBoardId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProjectFlowBoardGroups', 'projectId', projectId)
            // verify required parameter 'flowBoardId' is not null or undefined
            assertParamExists('getProjectFlowBoardGroups', 'flowBoardId', flowBoardId)
            const localVarPath = `/v1/projects/{project_id}/flow_boards/{flow_board_id}/groups`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"flow_board_id"}}`, encodeURIComponent(String(flowBoardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details of the project flow board node
         * @summary Get a single project flow board node
         * @param {string} projectId Project id
         * @param {string} flowBoardId Flow Board id
         * @param {string} nodeId Board node id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectFlowBoardNode: async (projectId: string, flowBoardId: string, nodeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProjectFlowBoardNode', 'projectId', projectId)
            // verify required parameter 'flowBoardId' is not null or undefined
            assertParamExists('getProjectFlowBoardNode', 'flowBoardId', flowBoardId)
            // verify required parameter 'nodeId' is not null or undefined
            assertParamExists('getProjectFlowBoardNode', 'nodeId', nodeId)
            const localVarPath = `/v1/projects/{project_id}/flow_boards/{flow_board_id}/nodes/{node_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"flow_board_id"}}`, encodeURIComponent(String(flowBoardId)))
                .replace(`{${"node_id"}}`, encodeURIComponent(String(nodeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all nodes of the flow board in a project
         * @summary Get project flow board nodes
         * @param {string} projectId Project id
         * @param {string} flowBoardId Flow Board id
         * @param {string} [groupId] Group id
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectFlowBoardNodes: async (projectId: string, flowBoardId: string, groupId?: string, limit?: number, offset?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProjectFlowBoardNodes', 'projectId', projectId)
            // verify required parameter 'flowBoardId' is not null or undefined
            assertParamExists('getProjectFlowBoardNodes', 'flowBoardId', flowBoardId)
            const localVarPath = `/v1/projects/{project_id}/flow_boards/{flow_board_id}/nodes`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"flow_board_id"}}`, encodeURIComponent(String(flowBoardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

    
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all flow boards in a project.
         * @summary Get project flow boards
         * @param {string} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectFlowBoards: async (projectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProjectFlowBoards', 'projectId', projectId)
            const localVarPath = `/v1/projects/{project_id}/flow_boards`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FlowsApi - functional programming interface
 * @export
 */
export const FlowsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FlowsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get flow board details related to a project
         * @summary Get a single project flow board
         * @param {string} projectId Project id
         * @param {string} flowBoardId Flow Board id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectFlowBoard(projectId: string, flowBoardId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectFlowBoard(projectId, flowBoardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get details of the project flow board connector
         * @summary Get a single project flow board connector
         * @param {string} projectId Project id
         * @param {string} flowBoardId Flow Board id
         * @param {string} connectorId Board connector id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectFlowBoardConnector(projectId: string, flowBoardId: string, connectorId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectFlowBoardConnector(projectId, flowBoardId, connectorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all connectors of the flow board in a project
         * @summary Get project flow board connectors
         * @param {string} projectId Project id
         * @param {string} flowBoardId Flow Board id
         * @param {string} [startingNodeId] Starting node id
         * @param {string} [endingNodeId] Ending node id
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectFlowBoardConnectors(projectId: string, flowBoardId: string, startingNodeId?: string, endingNodeId?: string, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectFlowBoardConnectors(projectId, flowBoardId, startingNodeId, endingNodeId, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all flow board groups in a project.
         * @summary Get project flow board groups
         * @param {string} projectId Project id
         * @param {string} flowBoardId Flow Board id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectFlowBoardGroups(projectId: string, flowBoardId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectFlowBoardGroups(projectId, flowBoardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get details of the project flow board node
         * @summary Get a single project flow board node
         * @param {string} projectId Project id
         * @param {string} flowBoardId Flow Board id
         * @param {string} nodeId Board node id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectFlowBoardNode(projectId: string, flowBoardId: string, nodeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectFlowBoardNode(projectId, flowBoardId, nodeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all nodes of the flow board in a project
         * @summary Get project flow board nodes
         * @param {string} projectId Project id
         * @param {string} flowBoardId Flow Board id
         * @param {string} [groupId] Group id
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectFlowBoardNodes(projectId: string, flowBoardId: string, groupId?: string, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectFlowBoardNodes(projectId, flowBoardId, groupId, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all flow boards in a project.
         * @summary Get project flow boards
         * @param {string} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectFlowBoards(projectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectFlowBoards(projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};




/**
 * Search parameters for getProjectFlowBoardConnectors operation in FlowsApi.
 * @export
 * @interface FlowsApiGetProjectFlowBoardConnectorsSearchParams
 */
export interface FlowsApiGetProjectFlowBoardConnectorsSearchParams {
    /**
     * Starting node id
     * @type {string}
     * @memberof FlowsApiGetProjectFlowBoardConnectorsSearchParams
     */
    readonly startingNodeId?: string;

    /**
     * Ending node id
     * @type {string}
     * @memberof FlowsApiGetProjectFlowBoardConnectorsSearchParams
     */
    readonly endingNodeId?: string;

    /**
     * Pagination limit
     * @type {number}
     * @memberof FlowsApiGetProjectFlowBoardConnectorsSearchParams
     */
    readonly limit?: number;

    /**
     * Pagination offset
     * @type {number}
     * @memberof FlowsApiGetProjectFlowBoardConnectorsSearchParams
     */
    readonly offset?: number;
}



/**
 * Search parameters for getProjectFlowBoardNodes operation in FlowsApi.
 * @export
 * @interface FlowsApiGetProjectFlowBoardNodesSearchParams
 */
export interface FlowsApiGetProjectFlowBoardNodesSearchParams {
    /**
     * Group id
     * @type {string}
     * @memberof FlowsApiGetProjectFlowBoardNodesSearchParams
     */
    readonly groupId?: string;

    /**
     * Pagination limit
     * @type {number}
     * @memberof FlowsApiGetProjectFlowBoardNodesSearchParams
     */
    readonly limit?: number;

    /**
     * Pagination offset
     * @type {number}
     * @memberof FlowsApiGetProjectFlowBoardNodesSearchParams
     */
    readonly offset?: number;
}



/**
 * FlowsApi - object-oriented interface
 * @export
 * @class FlowsApi
 * @extends {BaseAPI}
 */
export class FlowsApi extends BaseAPI {
    /**
     * Get flow board details related to a project
     * @summary Get a single project flow board
     * @param {string} projectId Project id
     * @param {string} flowBoardId Flow Board id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowsApi
     */
    public async getProjectFlowBoard(projectId: string, flowBoardId: string, options?: any) : Promise<AxiosResponse<FlowBoard>> {
        const flowsApiFp = FlowsApiFp(this.configuration);
        const request = await flowsApiFp.getProjectFlowBoard(projectId, flowBoardId, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: transformJSONToFlowBoard(response.data)
        };
    }

    /**
     * Get details of the project flow board connector
     * @summary Get a single project flow board connector
     * @param {string} projectId Project id
     * @param {string} flowBoardId Flow Board id
     * @param {string} connectorId Board connector id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowsApi
     */
    public async getProjectFlowBoardConnector(projectId: string, flowBoardId: string, connectorId: string, options?: any) : Promise<AxiosResponse<FlowBoardConnector>> {
        const flowsApiFp = FlowsApiFp(this.configuration);
        const request = await flowsApiFp.getProjectFlowBoardConnector(projectId, flowBoardId, connectorId, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: transformJSONToFlowBoardConnector(response.data)
        };
    }

    /**
     * List all connectors of the flow board in a project
     * @summary Get project flow board connectors
     * @param {string} projectId Project id
     * @param {string} flowBoardId Flow Board id
     * @param {FlowsApiGetProjectFlowBoardConnectorsSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowsApi
     */
    public async getProjectFlowBoardConnectors(projectId: string, flowBoardId: string, searchParams: FlowsApiGetProjectFlowBoardConnectorsSearchParams = {}, options?: any) : Promise<AxiosResponse<Array<FlowBoardConnector>>> {
        const flowsApiFp = FlowsApiFp(this.configuration);
        const request = await flowsApiFp.getProjectFlowBoardConnectors(projectId, flowBoardId, searchParams.startingNodeId, searchParams.endingNodeId, searchParams.limit, searchParams.offset, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: response.data.map(transformJSONToFlowBoardConnector)
        };
    }

    /**
     * List all flow board groups in a project.
     * @summary Get project flow board groups
     * @param {string} projectId Project id
     * @param {string} flowBoardId Flow Board id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowsApi
     */
    public async getProjectFlowBoardGroups(projectId: string, flowBoardId: string, options?: any) : Promise<AxiosResponse<Array<FlowBoardGroup>>> {
        const flowsApiFp = FlowsApiFp(this.configuration);
        const request = await flowsApiFp.getProjectFlowBoardGroups(projectId, flowBoardId, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: response.data.map(transformJSONToFlowBoardGroup)
        };
    }

    /**
     * Get details of the project flow board node
     * @summary Get a single project flow board node
     * @param {string} projectId Project id
     * @param {string} flowBoardId Flow Board id
     * @param {string} nodeId Board node id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowsApi
     */
    public async getProjectFlowBoardNode(projectId: string, flowBoardId: string, nodeId: string, options?: any) : Promise<AxiosResponse<FlowBoardNode>> {
        const flowsApiFp = FlowsApiFp(this.configuration);
        const request = await flowsApiFp.getProjectFlowBoardNode(projectId, flowBoardId, nodeId, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: transformJSONToFlowBoardNode(response.data)
        };
    }

    /**
     * List all nodes of the flow board in a project
     * @summary Get project flow board nodes
     * @param {string} projectId Project id
     * @param {string} flowBoardId Flow Board id
     * @param {FlowsApiGetProjectFlowBoardNodesSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowsApi
     */
    public async getProjectFlowBoardNodes(projectId: string, flowBoardId: string, searchParams: FlowsApiGetProjectFlowBoardNodesSearchParams = {}, options?: any) : Promise<AxiosResponse<Array<FlowBoardNode>>> {
        const flowsApiFp = FlowsApiFp(this.configuration);
        const request = await flowsApiFp.getProjectFlowBoardNodes(projectId, flowBoardId, searchParams.groupId, searchParams.limit, searchParams.offset, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: response.data.map(transformJSONToFlowBoardNode)
        };
    }

    /**
     * List all flow boards in a project.
     * @summary Get project flow boards
     * @param {string} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowsApi
     */
    public async getProjectFlowBoards(projectId: string, options?: any) : Promise<AxiosResponse<Array<FlowBoard>>> {
        const flowsApiFp = FlowsApiFp(this.configuration);
        const request = await flowsApiFp.getProjectFlowBoards(projectId, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: response.data.map(transformJSONToFlowBoard)
        };
    }
}
