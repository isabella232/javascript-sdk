/* tslint:disable */
/* eslint-disable */
/**
 * Zeplin API
 * Access your resources in Zeplin
 *
 * Contact: support@zeplin.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosResponse } from 'axios';
import FormData from 'form-data';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import {
    ConnectedComponent,
    transformConnectedComponentToJSON,
    transformJSONToConnectedComponent
} from '../models';
// @ts-ignore
import {
    ErrorResponse,
    transformErrorResponseToJSON,
    transformJSONToErrorResponse
} from '../models';
/**
 * ConnectedComponentsApi - axios parameter creator
 * @export
 */
export const ConnectedComponentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List all connected components of a project
         * @summary Get project connected components
         * @param {string} projectId Project id
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectConnectedComponents: async (projectId: string, limit?: number, offset?: number, includeLinkedStyleguides?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProjectConnectedComponents', 'projectId', projectId)
            const localVarPath = `/v1/projects/{project_id}/connected_components`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (includeLinkedStyleguides !== undefined) {
                localVarQueryParameter['include_linked_styleguides'] = includeLinkedStyleguides;
            }

    
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all connected components of a project
         * @summary Get styleguide connected components
         * @param {string} styleguideId Styleguide id
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {string} [linkedProject] Reference project id
         * @param {string} [linkedStyleguide] Reference styleguide id
         * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStyleguideConnectedComponents: async (styleguideId: string, limit?: number, offset?: number, linkedProject?: string, linkedStyleguide?: string, includeLinkedStyleguides?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'styleguideId' is not null or undefined
            assertParamExists('getStyleguideConnectedComponents', 'styleguideId', styleguideId)
            const localVarPath = `/v1/styleguides/{styleguide_id}/connected_components`
                .replace(`{${"styleguide_id"}}`, encodeURIComponent(String(styleguideId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (linkedProject !== undefined) {
                localVarQueryParameter['linked_project'] = linkedProject;
            }

            if (linkedStyleguide !== undefined) {
                localVarQueryParameter['linked_styleguide'] = linkedStyleguide;
            }

            if (includeLinkedStyleguides !== undefined) {
                localVarQueryParameter['include_linked_styleguides'] = includeLinkedStyleguides;
            }

    
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConnectedComponentsApi - functional programming interface
 * @export
 */
export const ConnectedComponentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConnectedComponentsApiAxiosParamCreator(configuration)
    return {
        /**
         * List all connected components of a project
         * @summary Get project connected components
         * @param {string} projectId Project id
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectConnectedComponents(projectId: string, limit?: number, offset?: number, includeLinkedStyleguides?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectConnectedComponents(projectId, limit, offset, includeLinkedStyleguides, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all connected components of a project
         * @summary Get styleguide connected components
         * @param {string} styleguideId Styleguide id
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {string} [linkedProject] Reference project id
         * @param {string} [linkedStyleguide] Reference styleguide id
         * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStyleguideConnectedComponents(styleguideId: string, limit?: number, offset?: number, linkedProject?: string, linkedStyleguide?: string, includeLinkedStyleguides?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStyleguideConnectedComponents(styleguideId, limit, offset, linkedProject, linkedStyleguide, includeLinkedStyleguides, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};


/**
 * Search parameters for getProjectConnectedComponents operation in ConnectedComponentsApi.
 * @export
 * @interface ConnectedComponentsApiGetProjectConnectedComponentsSearchParams
 */
export interface ConnectedComponentsApiGetProjectConnectedComponentsSearchParams {
    /**
     * Pagination limit
     * @type {number}
     * @memberof ConnectedComponentsApiGetProjectConnectedComponentsSearchParams
     */
    readonly limit?: number;

    /**
     * Pagination offset
     * @type {number}
     * @memberof ConnectedComponentsApiGetProjectConnectedComponentsSearchParams
     */
    readonly offset?: number;

    /**
     * Whether to include linked styleguides or not
     * @type {boolean}
     * @memberof ConnectedComponentsApiGetProjectConnectedComponentsSearchParams
     */
    readonly includeLinkedStyleguides?: boolean;
}

/**
 * Search parameters for getStyleguideConnectedComponents operation in ConnectedComponentsApi.
 * @export
 * @interface ConnectedComponentsApiGetStyleguideConnectedComponentsSearchParams
 */
export interface ConnectedComponentsApiGetStyleguideConnectedComponentsSearchParams {
    /**
     * Pagination limit
     * @type {number}
     * @memberof ConnectedComponentsApiGetStyleguideConnectedComponentsSearchParams
     */
    readonly limit?: number;

    /**
     * Pagination offset
     * @type {number}
     * @memberof ConnectedComponentsApiGetStyleguideConnectedComponentsSearchParams
     */
    readonly offset?: number;

    /**
     * Reference project id
     * @type {string}
     * @memberof ConnectedComponentsApiGetStyleguideConnectedComponentsSearchParams
     */
    readonly linkedProject?: string;

    /**
     * Reference styleguide id
     * @type {string}
     * @memberof ConnectedComponentsApiGetStyleguideConnectedComponentsSearchParams
     */
    readonly linkedStyleguide?: string;

    /**
     * Whether to include linked styleguides or not
     * @type {boolean}
     * @memberof ConnectedComponentsApiGetStyleguideConnectedComponentsSearchParams
     */
    readonly includeLinkedStyleguides?: boolean;
}


/**
 * ConnectedComponentsApi - object-oriented interface
 * @export
 * @class ConnectedComponentsApi
 * @extends {BaseAPI}
 */
export class ConnectedComponentsApi extends BaseAPI {
    /**
     * List all connected components of a project
     * @summary Get project connected components
     * @param {string} projectId Project id
     * @param {ConnectedComponentsApiGetProjectConnectedComponentsSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectedComponentsApi
     */
    public async getProjectConnectedComponents(projectId: string, searchParams: ConnectedComponentsApiGetProjectConnectedComponentsSearchParams = {}, options?: any) : Promise<AxiosResponse<Array<ConnectedComponent>>> {
        const connectedComponentsApiFp = ConnectedComponentsApiFp(this.configuration);
        const request = await connectedComponentsApiFp.getProjectConnectedComponents(projectId, searchParams.limit, searchParams.offset, searchParams.includeLinkedStyleguides, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: response.data.map(transformJSONToConnectedComponent)
        };
    }

    /**
     * List all connected components of a project
     * @summary Get styleguide connected components
     * @param {string} styleguideId Styleguide id
     * @param {ConnectedComponentsApiGetStyleguideConnectedComponentsSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectedComponentsApi
     */
    public async getStyleguideConnectedComponents(styleguideId: string, searchParams: ConnectedComponentsApiGetStyleguideConnectedComponentsSearchParams = {}, options?: any) : Promise<AxiosResponse<Array<ConnectedComponent>>> {
        const connectedComponentsApiFp = ConnectedComponentsApiFp(this.configuration);
        const request = await connectedComponentsApiFp.getStyleguideConnectedComponents(styleguideId, searchParams.limit, searchParams.offset, searchParams.linkedProject, searchParams.linkedStyleguide, searchParams.includeLinkedStyleguides, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: response.data.map(transformJSONToConnectedComponent)
        };
    }
}
