/* tslint:disable */
/* eslint-disable */
/**
 * Zeplin API
 * Access your resources in Zeplin
 *
 * Contact: support@zeplin.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosResponse } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import {
    DesignTokens,
    transformDesignTokensToJSON,
    transformJSONToDesignTokens
} from '../models';
// @ts-ignore
import {
    ErrorResponse,
    transformErrorResponseToJSON,
    transformJSONToErrorResponse
} from '../models';
// @ts-ignore
import {
    Project,
    transformProjectToJSON,
    transformJSONToProject
} from '../models';
// @ts-ignore
import {
    ProjectMember,
    transformProjectMemberToJSON,
    transformJSONToProjectMember
} from '../models';
// @ts-ignore
import {
    ProjectStatusEnum,
    transformProjectStatusEnumToJSON,
    transformJSONToProjectStatusEnum
} from '../models';
// @ts-ignore
import {
    ProjectUpdateBody,
    transformProjectUpdateBodyToJSON,
    transformJSONToProjectUpdateBody
} from '../models';
/**
 * ProjectsApi - axios parameter creator
 * @export
 */
export const ProjectsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a project by id
         * @summary Get a single project
         * @param {string} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProject: async (projectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProject', 'projectId', projectId)
            const localVarPath = `/v1/projects/{project_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch all design tokens of the project
         * @summary Get project design tokens
         * @param {string} projectId Project id
         * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
         * @param {'kebab' | 'snake' | 'camel' | 'pascal' | 'constant' | 'original'} [tokenNameCase] Case for token names
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectDesignTokens: async (projectId: string, includeLinkedStyleguides?: boolean, tokenNameCase?: 'kebab' | 'snake' | 'camel' | 'pascal' | 'constant' | 'original', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProjectDesignTokens', 'projectId', projectId)
            const localVarPath = `/v1/projects/{project_id}/design_tokens`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (includeLinkedStyleguides !== undefined) {
                localVarQueryParameter['include_linked_styleguides'] = includeLinkedStyleguides;
            }

            if (tokenNameCase !== undefined) {
                localVarQueryParameter['token_name_case'] = tokenNameCase;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all members of the project
         * @summary Get project members
         * @param {string} projectId Project id
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectMembers: async (projectId: string, limit?: number, offset?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProjectMembers', 'projectId', projectId)
            const localVarPath = `/v1/projects/{project_id}/members`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all projects that user is a member of
         * @summary Get all projects
         * @param {number} [limit] Pagination limit
         * @param {string} [workspace] Workspace of the project, it can be &#x60;personal&#x60; or the id of organization
         * @param {ProjectStatusEnum} [status] Filter by status
         * @param {number} [offset] Pagination offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjects: async (limit?: number, workspace?: string, status?: ProjectStatusEnum, offset?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (workspace !== undefined) {
                localVarQueryParameter['workspace'] = workspace;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a project\'s name and description
         * @summary Update a project
         * @param {string} projectId Project id
         * @param {ProjectUpdateBody} projectUpdateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProject: async (projectId: string, projectUpdateBody: ProjectUpdateBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('updateProject', 'projectId', projectId)
            // verify required parameter 'projectUpdateBody' is not null or undefined
            assertParamExists('updateProject', 'projectUpdateBody', projectUpdateBody)
            const localVarPath = `/v1/projects/{project_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transformProjectUpdateBodyToJSON(projectUpdateBody), localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectsApi - functional programming interface
 * @export
 */
export const ProjectsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get a project by id
         * @summary Get a single project
         * @param {string} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProject(projectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProject(projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch all design tokens of the project
         * @summary Get project design tokens
         * @param {string} projectId Project id
         * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
         * @param {'kebab' | 'snake' | 'camel' | 'pascal' | 'constant' | 'original'} [tokenNameCase] Case for token names
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectDesignTokens(projectId: string, includeLinkedStyleguides?: boolean, tokenNameCase?: 'kebab' | 'snake' | 'camel' | 'pascal' | 'constant' | 'original', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectDesignTokens(projectId, includeLinkedStyleguides, tokenNameCase, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all members of the project
         * @summary Get project members
         * @param {string} projectId Project id
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectMembers(projectId: string, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectMembers(projectId, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all projects that user is a member of
         * @summary Get all projects
         * @param {number} [limit] Pagination limit
         * @param {string} [workspace] Workspace of the project, it can be &#x60;personal&#x60; or the id of organization
         * @param {ProjectStatusEnum} [status] Filter by status
         * @param {number} [offset] Pagination offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjects(limit?: number, workspace?: string, status?: ProjectStatusEnum, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjects(limit, workspace, status, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a project\'s name and description
         * @summary Update a project
         * @param {string} projectId Project id
         * @param {ProjectUpdateBody} projectUpdateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProject(projectId: string, projectUpdateBody: ProjectUpdateBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProject(projectId, projectUpdateBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};



/**
 * Search parameters for getProjectDesignTokens operation in ProjectsApi.
 * @export
 * @interface ProjectsApiGetProjectDesignTokensSearchParams
 */
export interface ProjectsApiGetProjectDesignTokensSearchParams {
    /**
     * Whether to include linked styleguides or not
     * @type {boolean}
     * @memberof ProjectsApiGetProjectDesignTokensSearchParams
     */
    readonly includeLinkedStyleguides?: boolean;

    /**
     * Case for token names
     * @type {'kebab' | 'snake' | 'camel' | 'pascal' | 'constant' | 'original'}
     * @memberof ProjectsApiGetProjectDesignTokensSearchParams
     */
    readonly tokenNameCase?: 'kebab' | 'snake' | 'camel' | 'pascal' | 'constant' | 'original';
}

/**
 * Search parameters for getProjectMembers operation in ProjectsApi.
 * @export
 * @interface ProjectsApiGetProjectMembersSearchParams
 */
export interface ProjectsApiGetProjectMembersSearchParams {
    /**
     * Pagination limit
     * @type {number}
     * @memberof ProjectsApiGetProjectMembersSearchParams
     */
    readonly limit?: number;

    /**
     * Pagination offset
     * @type {number}
     * @memberof ProjectsApiGetProjectMembersSearchParams
     */
    readonly offset?: number;
}

/**
 * Search parameters for getProjects operation in ProjectsApi.
 * @export
 * @interface ProjectsApiGetProjectsSearchParams
 */
export interface ProjectsApiGetProjectsSearchParams {
    /**
     * Pagination limit
     * @type {number}
     * @memberof ProjectsApiGetProjectsSearchParams
     */
    readonly limit?: number;

    /**
     * Workspace of the project, it can be &#x60;personal&#x60; or the id of organization
     * @type {string}
     * @memberof ProjectsApiGetProjectsSearchParams
     */
    readonly workspace?: string;

    /**
     * Filter by status
     * @type {ProjectStatusEnum}
     * @memberof ProjectsApiGetProjectsSearchParams
     */
    readonly status?: ProjectStatusEnum;

    /**
     * Pagination offset
     * @type {number}
     * @memberof ProjectsApiGetProjectsSearchParams
     */
    readonly offset?: number;
}



/**
 * ProjectsApi - object-oriented interface
 * @export
 * @class ProjectsApi
 * @extends {BaseAPI}
 */
export class ProjectsApi extends BaseAPI {
    /**
     * Get a project by id
     * @summary Get a single project
     * @param {string} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public async getProject(projectId: string, options?: any) : Promise<AxiosResponse<Project>> {
        const projectsApiFp = ProjectsApiFp(this.configuration);
        const request = await projectsApiFp.getProject(projectId, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: transformJSONToProject(response.data)
        };
    }

    /**
     * Fetch all design tokens of the project
     * @summary Get project design tokens
     * @param {string} projectId Project id
     * @param {ProjectsApiGetProjectDesignTokensSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public async getProjectDesignTokens(projectId: string, searchParams: ProjectsApiGetProjectDesignTokensSearchParams = {}, options?: any) : Promise<AxiosResponse<DesignTokens>> {
        const projectsApiFp = ProjectsApiFp(this.configuration);
        const request = await projectsApiFp.getProjectDesignTokens(projectId, searchParams.includeLinkedStyleguides, searchParams.tokenNameCase, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: transformJSONToDesignTokens(response.data)
        };
    }

    /**
     * List all members of the project
     * @summary Get project members
     * @param {string} projectId Project id
     * @param {ProjectsApiGetProjectMembersSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public async getProjectMembers(projectId: string, searchParams: ProjectsApiGetProjectMembersSearchParams = {}, options?: any) : Promise<AxiosResponse<Array<ProjectMember>>> {
        const projectsApiFp = ProjectsApiFp(this.configuration);
        const request = await projectsApiFp.getProjectMembers(projectId, searchParams.limit, searchParams.offset, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: response.data.map(transformJSONToProjectMember)
        };
    }

    /**
     * List all projects that user is a member of
     * @summary Get all projects
     * @param {ProjectsApiGetProjectsSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public async getProjects(searchParams: ProjectsApiGetProjectsSearchParams = {}, options?: any) : Promise<AxiosResponse<Array<Project>>> {
        const projectsApiFp = ProjectsApiFp(this.configuration);
        const request = await projectsApiFp.getProjects(searchParams.limit, searchParams.workspace, searchParams.status, searchParams.offset, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: response.data.map(transformJSONToProject)
        };
    }

    /**
     * Update a project\'s name and description
     * @summary Update a project
     * @param {string} projectId Project id
     * @param {ProjectUpdateBody} projectUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public async updateProject(projectId: string, projectUpdateBody: ProjectUpdateBody, options?: any) : Promise<AxiosResponse<void>> {
        const projectsApiFp = ProjectsApiFp(this.configuration);
        const request = await projectsApiFp.updateProject(projectId, projectUpdateBody, options);
        const response = await request(this.axios, this.basePath);
        return response;
    }
}
